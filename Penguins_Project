{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Group Contributions Statment**\n",
        "\n",
        "**Team Members:** Brandon Day, Julia Craciun\n",
        "\n",
        "Both of us collaborated on the data preparation section, with Brandon coding variables as categorical and Julia performing the other cleaning tasks. Brandon was responsible for the table and histogram in the EDA section, while Julia created the scatterplot matrix and Culmen Length vs. Depth chart. Julia completed the Feature Selection section with guidance from Brandon's table and chart. Brandon led the multinomial logistic regression model and explanation while Julia led the SVM model and explanation. We all checked each other's work and contributed text to each and every section."
      ],
      "metadata": {
        "id": "M9feNLLcd77J"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Prep and Cleaning**"
      ],
      "metadata": {
        "id": "cFx7LB3CecUA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's go ahead and explore the penguins dataset!\n",
        "\n",
        "## **Uploading the Data**"
      ],
      "metadata": {
        "id": "KL1ubsKagpZ_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K6zLggLFcu4m"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import urllib\n",
        "from matplotlib import pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = \"https://philchodrow.github.io/PIC16A/datasets/palmer_penguins.csv\"\n",
        "penguins = pd.read_csv(url)"
      ],
      "metadata": {
        "id": "31UHspANdHVs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "penguins.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "FvXu0NhbdMau",
        "outputId": "b0c935b9-adc2-459a-ea4e-140a77420c5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  studyName  Sample Number                              Species  Region  \\\n",
              "0   PAL0708              1  Adelie Penguin (Pygoscelis adeliae)  Anvers   \n",
              "1   PAL0708              2  Adelie Penguin (Pygoscelis adeliae)  Anvers   \n",
              "2   PAL0708              3  Adelie Penguin (Pygoscelis adeliae)  Anvers   \n",
              "3   PAL0708              4  Adelie Penguin (Pygoscelis adeliae)  Anvers   \n",
              "4   PAL0708              5  Adelie Penguin (Pygoscelis adeliae)  Anvers   \n",
              "\n",
              "      Island               Stage Individual ID Clutch Completion  Date Egg  \\\n",
              "0  Torgersen  Adult, 1 Egg Stage          N1A1               Yes  11/11/07   \n",
              "1  Torgersen  Adult, 1 Egg Stage          N1A2               Yes  11/11/07   \n",
              "2  Torgersen  Adult, 1 Egg Stage          N2A1               Yes  11/16/07   \n",
              "3  Torgersen  Adult, 1 Egg Stage          N2A2               Yes  11/16/07   \n",
              "4  Torgersen  Adult, 1 Egg Stage          N3A1               Yes  11/16/07   \n",
              "\n",
              "   Culmen Length (mm)  Culmen Depth (mm)  Flipper Length (mm)  Body Mass (g)  \\\n",
              "0                39.1               18.7                181.0         3750.0   \n",
              "1                39.5               17.4                186.0         3800.0   \n",
              "2                40.3               18.0                195.0         3250.0   \n",
              "3                 NaN                NaN                  NaN            NaN   \n",
              "4                36.7               19.3                193.0         3450.0   \n",
              "\n",
              "      Sex  Delta 15 N (o/oo)  Delta 13 C (o/oo)  \\\n",
              "0    MALE                NaN                NaN   \n",
              "1  FEMALE            8.94956          -24.69454   \n",
              "2  FEMALE            8.36821          -25.33302   \n",
              "3     NaN                NaN                NaN   \n",
              "4  FEMALE            8.76651          -25.32426   \n",
              "\n",
              "                         Comments  \n",
              "0  Not enough blood for isotopes.  \n",
              "1                             NaN  \n",
              "2                             NaN  \n",
              "3              Adult not sampled.  \n",
              "4                             NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-de1e8cfe-4485-49e2-b63f-77d787669017\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>studyName</th>\n",
              "      <th>Sample Number</th>\n",
              "      <th>Species</th>\n",
              "      <th>Region</th>\n",
              "      <th>Island</th>\n",
              "      <th>Stage</th>\n",
              "      <th>Individual ID</th>\n",
              "      <th>Clutch Completion</th>\n",
              "      <th>Date Egg</th>\n",
              "      <th>Culmen Length (mm)</th>\n",
              "      <th>Culmen Depth (mm)</th>\n",
              "      <th>Flipper Length (mm)</th>\n",
              "      <th>Body Mass (g)</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Delta 15 N (o/oo)</th>\n",
              "      <th>Delta 13 C (o/oo)</th>\n",
              "      <th>Comments</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>PAL0708</td>\n",
              "      <td>1</td>\n",
              "      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n",
              "      <td>Anvers</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>Adult, 1 Egg Stage</td>\n",
              "      <td>N1A1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11/11/07</td>\n",
              "      <td>39.1</td>\n",
              "      <td>18.7</td>\n",
              "      <td>181.0</td>\n",
              "      <td>3750.0</td>\n",
              "      <td>MALE</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Not enough blood for isotopes.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>PAL0708</td>\n",
              "      <td>2</td>\n",
              "      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n",
              "      <td>Anvers</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>Adult, 1 Egg Stage</td>\n",
              "      <td>N1A2</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11/11/07</td>\n",
              "      <td>39.5</td>\n",
              "      <td>17.4</td>\n",
              "      <td>186.0</td>\n",
              "      <td>3800.0</td>\n",
              "      <td>FEMALE</td>\n",
              "      <td>8.94956</td>\n",
              "      <td>-24.69454</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>PAL0708</td>\n",
              "      <td>3</td>\n",
              "      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n",
              "      <td>Anvers</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>Adult, 1 Egg Stage</td>\n",
              "      <td>N2A1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11/16/07</td>\n",
              "      <td>40.3</td>\n",
              "      <td>18.0</td>\n",
              "      <td>195.0</td>\n",
              "      <td>3250.0</td>\n",
              "      <td>FEMALE</td>\n",
              "      <td>8.36821</td>\n",
              "      <td>-25.33302</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>PAL0708</td>\n",
              "      <td>4</td>\n",
              "      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n",
              "      <td>Anvers</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>Adult, 1 Egg Stage</td>\n",
              "      <td>N2A2</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11/16/07</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Adult not sampled.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>PAL0708</td>\n",
              "      <td>5</td>\n",
              "      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n",
              "      <td>Anvers</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>Adult, 1 Egg Stage</td>\n",
              "      <td>N3A1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11/16/07</td>\n",
              "      <td>36.7</td>\n",
              "      <td>19.3</td>\n",
              "      <td>193.0</td>\n",
              "      <td>3450.0</td>\n",
              "      <td>FEMALE</td>\n",
              "      <td>8.76651</td>\n",
              "      <td>-25.32426</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de1e8cfe-4485-49e2-b63f-77d787669017')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-de1e8cfe-4485-49e2-b63f-77d787669017 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-de1e8cfe-4485-49e2-b63f-77d787669017');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "penguins.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aMA0uG4ohC6-",
        "outputId": "9596bbc1-753e-4afc-b02c-5772bf3d8283"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(344, 17)"
            ]
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There are 17 columns and 344 rows within this dataset. We can see a few `NaN` values just within the first few rows of the dataset that will need to be dealt with later. "
      ],
      "metadata": {
        "id": "MguZOGiTgyNd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "penguins.Sex.unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ebno7F0iS5b",
        "outputId": "86d24244-b17f-4f29-d746-7ef714dafe39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['MALE', 'FEMALE', nan, '.'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "penguins.Region.unique() "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jyvX6vT7hKXb",
        "outputId": "0321926d-0e39-4824-f76a-a6d6ed4d399c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Anvers'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Seeing that there is only one region for this entire dataset, this is a column we should consider dropping. There is also an unusual \".\" value under the Sex column, another value that we should drop in the cleaning process."
      ],
      "metadata": {
        "id": "HXQt1-1LhPKc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Data Prep and Cleaning**"
      ],
      "metadata": {
        "id": "wagesXoteEqB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since we may have to clean again after the EDA and Feature Selection portions of this project, we decided to wait until the end of both of those sections to create the training and testing sets. For now, we'll do some general cleaning before we fully decide on our final variables. "
      ],
      "metadata": {
        "id": "OGtk9RpdhiS0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import preprocessing\n",
        "\n",
        "def data_clean(df, drop, test = False):\n",
        "  '''\n",
        "  - This function is encodes the categorical variables into numerical \n",
        "  variables. For example, \"Male\" would be encoded as 1 and \"Female\"\n",
        "  would be encoded as 0. The function also shortens the name of the\n",
        "  species. For example \"Adelie Penguin (Pygoscelis adeliae)\" would now be\n",
        "  \"Adelie\"\n",
        "  - Inputs: df, the penguins dataframe\n",
        "            drop, a list of columns that you desire to drop\n",
        "            test, a boolean variable indicating if you want the data returned as X and y variables\n",
        "\n",
        "  -Outputs: cleaned data as a numpy array for EDA and Feature Selection. \n",
        "  '''\n",
        "  # shorten the species name \n",
        "  df[\"Species\"] = df[\"Species\"].str.split().str.get(0)\n",
        "  # drop columns\n",
        "  df = df.drop(drop, axis = 1)\n",
        "  # drop nas\n",
        "  df = df.dropna()\n",
        "  # code sex as categorical\n",
        "  le = preprocessing.LabelEncoder()\n",
        "\n",
        "  if \"Sex\" in df.columns:\n",
        "  # Need to drop where the penguin's sex is a period\n",
        "    df = df[df['Sex'] != '.']\n",
        "    df['Sex'] = le.fit_transform(df['Sex'])\n",
        "  # code island as categorical \n",
        "  if \"Island\" in df.columns:\n",
        "    df['Island'] = le.fit_transform(df['Island'])\n",
        "  # cluch completion as categorical\n",
        "  if \"Clutch Completion\" in df.columns:\n",
        "    df['Clutch Completion'] = le.fit_transform(df['Clutch Completion'])\n",
        "  # convert the column of dates to actual dates\n",
        "  if \"Date Egg\" in df.columns:\n",
        "    df[\"Date Egg\"] = pd.to_datetime(df[\"Date Egg\"])\n",
        "\n",
        "\n",
        "  if test == False:\n",
        "    return df\n",
        "  \n",
        "  elif test == True:\n",
        "    df[\"Species\"] = le.fit_transform(df[\"Species\"])\n",
        "    X = df.drop([\"Species\"], axis = 1)\n",
        "    y = df[\"Species\"]\n",
        "    return (X, y)"
      ],
      "metadata": {
        "id": "cdz3Hh8Zerw4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "penguins_clean = data_clean(penguins, drop = [\"Comments\", \"Region\"])"
      ],
      "metadata": {
        "id": "3SkpTBCagJI7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "penguins_clean.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 371
        },
        "id": "GO4whll_j6wS",
        "outputId": "8eb2d111-c34a-49c7-bc1e-0dd825091eab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  studyName  Sample Number Species  Island               Stage Individual ID  \\\n",
              "1   PAL0708              2  Adelie       2  Adult, 1 Egg Stage          N1A2   \n",
              "2   PAL0708              3  Adelie       2  Adult, 1 Egg Stage          N2A1   \n",
              "4   PAL0708              5  Adelie       2  Adult, 1 Egg Stage          N3A1   \n",
              "5   PAL0708              6  Adelie       2  Adult, 1 Egg Stage          N3A2   \n",
              "6   PAL0708              7  Adelie       2  Adult, 1 Egg Stage          N4A1   \n",
              "\n",
              "   Clutch Completion   Date Egg  Culmen Length (mm)  Culmen Depth (mm)  \\\n",
              "1                  1 2007-11-11                39.5               17.4   \n",
              "2                  1 2007-11-16                40.3               18.0   \n",
              "4                  1 2007-11-16                36.7               19.3   \n",
              "5                  1 2007-11-16                39.3               20.6   \n",
              "6                  0 2007-11-15                38.9               17.8   \n",
              "\n",
              "   Flipper Length (mm)  Body Mass (g)  Sex  Delta 15 N (o/oo)  \\\n",
              "1                186.0         3800.0    0            8.94956   \n",
              "2                195.0         3250.0    0            8.36821   \n",
              "4                193.0         3450.0    0            8.76651   \n",
              "5                190.0         3650.0    1            8.66496   \n",
              "6                181.0         3625.0    0            9.18718   \n",
              "\n",
              "   Delta 13 C (o/oo)  \n",
              "1          -24.69454  \n",
              "2          -25.33302  \n",
              "4          -25.32426  \n",
              "5          -25.29805  \n",
              "6          -25.21799  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-75edb803-fa60-4eba-b183-2edd0dfb7832\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>studyName</th>\n",
              "      <th>Sample Number</th>\n",
              "      <th>Species</th>\n",
              "      <th>Island</th>\n",
              "      <th>Stage</th>\n",
              "      <th>Individual ID</th>\n",
              "      <th>Clutch Completion</th>\n",
              "      <th>Date Egg</th>\n",
              "      <th>Culmen Length (mm)</th>\n",
              "      <th>Culmen Depth (mm)</th>\n",
              "      <th>Flipper Length (mm)</th>\n",
              "      <th>Body Mass (g)</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Delta 15 N (o/oo)</th>\n",
              "      <th>Delta 13 C (o/oo)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>PAL0708</td>\n",
              "      <td>2</td>\n",
              "      <td>Adelie</td>\n",
              "      <td>2</td>\n",
              "      <td>Adult, 1 Egg Stage</td>\n",
              "      <td>N1A2</td>\n",
              "      <td>1</td>\n",
              "      <td>2007-11-11</td>\n",
              "      <td>39.5</td>\n",
              "      <td>17.4</td>\n",
              "      <td>186.0</td>\n",
              "      <td>3800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.94956</td>\n",
              "      <td>-24.69454</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>PAL0708</td>\n",
              "      <td>3</td>\n",
              "      <td>Adelie</td>\n",
              "      <td>2</td>\n",
              "      <td>Adult, 1 Egg Stage</td>\n",
              "      <td>N2A1</td>\n",
              "      <td>1</td>\n",
              "      <td>2007-11-16</td>\n",
              "      <td>40.3</td>\n",
              "      <td>18.0</td>\n",
              "      <td>195.0</td>\n",
              "      <td>3250.0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.36821</td>\n",
              "      <td>-25.33302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>PAL0708</td>\n",
              "      <td>5</td>\n",
              "      <td>Adelie</td>\n",
              "      <td>2</td>\n",
              "      <td>Adult, 1 Egg Stage</td>\n",
              "      <td>N3A1</td>\n",
              "      <td>1</td>\n",
              "      <td>2007-11-16</td>\n",
              "      <td>36.7</td>\n",
              "      <td>19.3</td>\n",
              "      <td>193.0</td>\n",
              "      <td>3450.0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.76651</td>\n",
              "      <td>-25.32426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>PAL0708</td>\n",
              "      <td>6</td>\n",
              "      <td>Adelie</td>\n",
              "      <td>2</td>\n",
              "      <td>Adult, 1 Egg Stage</td>\n",
              "      <td>N3A2</td>\n",
              "      <td>1</td>\n",
              "      <td>2007-11-16</td>\n",
              "      <td>39.3</td>\n",
              "      <td>20.6</td>\n",
              "      <td>190.0</td>\n",
              "      <td>3650.0</td>\n",
              "      <td>1</td>\n",
              "      <td>8.66496</td>\n",
              "      <td>-25.29805</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>PAL0708</td>\n",
              "      <td>7</td>\n",
              "      <td>Adelie</td>\n",
              "      <td>2</td>\n",
              "      <td>Adult, 1 Egg Stage</td>\n",
              "      <td>N4A1</td>\n",
              "      <td>0</td>\n",
              "      <td>2007-11-15</td>\n",
              "      <td>38.9</td>\n",
              "      <td>17.8</td>\n",
              "      <td>181.0</td>\n",
              "      <td>3625.0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.18718</td>\n",
              "      <td>-25.21799</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75edb803-fa60-4eba-b183-2edd0dfb7832')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-75edb803-fa60-4eba-b183-2edd0dfb7832 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-75edb803-fa60-4eba-b183-2edd0dfb7832');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "penguins_clean.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hl9Hxh_AjMfU",
        "outputId": "bdfa06e1-1a78-4838-d359-b97872a5f727"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(324, 15)"
            ]
          },
          "metadata": {},
          "execution_count": 137
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A lot better! The species name is more readible, there are no NaN or \".\" values, and the categorical variables are now properly coded. We also did not lose too much data in the process. For later use, let's go ahead and see exactly what species each species label represents."
      ],
      "metadata": {
        "id": "u85ojN1Lm1gn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import preprocessing\n",
        "le = preprocessing.LabelEncoder()\n",
        "penguins_copy = penguins.copy()\n",
        "le.fit(penguins_copy['Species'])\n",
        "le_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\n",
        "print(le_name_mapping)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dJvT9Ghpq0xG",
        "outputId": "70b1e4db-1963-481e-981c-c7f0e6dd9edf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Adelie': 0, 'Chinstrap': 1, 'Gentoo': 2}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now we're ready to start exploring the data! "
      ],
      "metadata": {
        "id": "C9Ye2DKQryJe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Exploratory Analysis**"
      ],
      "metadata": {
        "id": "ZPDsVNUQrpjS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "By creating a function that determines the mean values of each penguin feature, we can further comprehend the relationships between penguin species and their physical qualities. This will guide us in selecting qualitative and quantitative variables to create predictions."
      ],
      "metadata": {
        "id": "dw-0Wp6GsCnB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Dropping '.' in the 'Sex' column as mentioned earlier\n",
        "penguins = penguins[penguins['Sex'] != '.']\n",
        "\n",
        "def penguin_summary_table(group_cols, value_cols):\n",
        "  '''\n",
        "  -This function creates a table in which the mean of each element of \n",
        "  value_cols is shown and grouped according to the specified group_cols.\n",
        "  These values are rounded to 2 decimal places.\n",
        "  '''\n",
        "  return penguins.groupby(group_cols)[value_cols].mean().round(2)"
      ],
      "metadata": {
        "id": "7jbEl-L42Wou"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "For the sake of the table labels, we used the penguins data set before cleaning. "
      ],
      "metadata": {
        "id": "ub7hC7RrjuWK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "penguin_summary_table([\"Species\", \"Sex\", \"Island\"],\n",
        "                      [\"Body Mass (g)\",\"Flipper Length (mm)\", \n",
        "                       \"Culmen Depth (mm)\", \"Culmen Length (mm)\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "Bcn-b4Wy22-P",
        "outputId": "91422cef-8acb-4d46-b494-361133a8c7e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                            Body Mass (g)  Flipper Length (mm)  \\\n",
              "Species   Sex    Island                                          \n",
              "Adelie    FEMALE Biscoe           3369.32               187.18   \n",
              "                 Dream            3344.44               187.85   \n",
              "                 Torgersen        3395.83               188.29   \n",
              "          MALE   Biscoe           4050.00               190.41   \n",
              "                 Dream            4045.54               191.93   \n",
              "                 Torgersen        4034.78               194.91   \n",
              "Chinstrap FEMALE Dream            3527.21               191.74   \n",
              "          MALE   Dream            3938.97               199.91   \n",
              "Gentoo    FEMALE Biscoe           4679.74               212.71   \n",
              "          MALE   Biscoe           5484.84               221.54   \n",
              "\n",
              "                            Culmen Depth (mm)  Culmen Length (mm)  \n",
              "Species   Sex    Island                                            \n",
              "Adelie    FEMALE Biscoe                 17.70               37.36  \n",
              "                 Dream                  17.62               36.91  \n",
              "                 Torgersen              17.55               37.55  \n",
              "          MALE   Biscoe                 19.04               40.59  \n",
              "                 Dream                  18.84               40.07  \n",
              "                 Torgersen              19.39               40.59  \n",
              "Chinstrap FEMALE Dream                  17.59               46.57  \n",
              "          MALE   Dream                  19.25               51.09  \n",
              "Gentoo    FEMALE Biscoe                 14.24               45.56  \n",
              "          MALE   Biscoe                 15.72               49.47  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7ae01f3e-f9fe-4c5c-a3c0-f17732b830e9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>Body Mass (g)</th>\n",
              "      <th>Flipper Length (mm)</th>\n",
              "      <th>Culmen Depth (mm)</th>\n",
              "      <th>Culmen Length (mm)</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Species</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Island</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"6\" valign=\"top\">Adelie</th>\n",
              "      <th rowspan=\"3\" valign=\"top\">FEMALE</th>\n",
              "      <th>Biscoe</th>\n",
              "      <td>3369.32</td>\n",
              "      <td>187.18</td>\n",
              "      <td>17.70</td>\n",
              "      <td>37.36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Dream</th>\n",
              "      <td>3344.44</td>\n",
              "      <td>187.85</td>\n",
              "      <td>17.62</td>\n",
              "      <td>36.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Torgersen</th>\n",
              "      <td>3395.83</td>\n",
              "      <td>188.29</td>\n",
              "      <td>17.55</td>\n",
              "      <td>37.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">MALE</th>\n",
              "      <th>Biscoe</th>\n",
              "      <td>4050.00</td>\n",
              "      <td>190.41</td>\n",
              "      <td>19.04</td>\n",
              "      <td>40.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Dream</th>\n",
              "      <td>4045.54</td>\n",
              "      <td>191.93</td>\n",
              "      <td>18.84</td>\n",
              "      <td>40.07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Torgersen</th>\n",
              "      <td>4034.78</td>\n",
              "      <td>194.91</td>\n",
              "      <td>19.39</td>\n",
              "      <td>40.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">Chinstrap</th>\n",
              "      <th>FEMALE</th>\n",
              "      <th>Dream</th>\n",
              "      <td>3527.21</td>\n",
              "      <td>191.74</td>\n",
              "      <td>17.59</td>\n",
              "      <td>46.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MALE</th>\n",
              "      <th>Dream</th>\n",
              "      <td>3938.97</td>\n",
              "      <td>199.91</td>\n",
              "      <td>19.25</td>\n",
              "      <td>51.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">Gentoo</th>\n",
              "      <th>FEMALE</th>\n",
              "      <th>Biscoe</th>\n",
              "      <td>4679.74</td>\n",
              "      <td>212.71</td>\n",
              "      <td>14.24</td>\n",
              "      <td>45.56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MALE</th>\n",
              "      <th>Biscoe</th>\n",
              "      <td>5484.84</td>\n",
              "      <td>221.54</td>\n",
              "      <td>15.72</td>\n",
              "      <td>49.47</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ae01f3e-f9fe-4c5c-a3c0-f17732b830e9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7ae01f3e-f9fe-4c5c-a3c0-f17732b830e9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7ae01f3e-f9fe-4c5c-a3c0-f17732b830e9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After analyzing the table, the best qualitative feature we will use is 'Island' because certain species of penguins seems to only exist on certain islands. The Adelie is the only penguin that appears to live on multiple. This variable has the potential to help future models distinguish between each species more efficiently.\n",
        "\n",
        "The table also indicates that the best quantitative features to use would be body mass and culmen length because these values have more variation among each species. For example, the Gentoo species has a considerably higher body mass in comparison to Adelie, and the Chinstrap species has a larger culmen length in comparison to Adelie.\n",
        "\n",
        "These are just our initial observations and guesses solely based on this table alone. To further investigate how the different features vary between each penguin species, we will create histograms to help visualize these distinctions."
      ],
      "metadata": {
        "id": "8DiIJqbeyWlF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating subplots\n",
        "fig, ax = plt.subplots(1, 4, figsize = (15, 5), sharey = True)\n",
        "featureList = [\"Body Mass (g)\", \"Flipper Length (mm)\",\n",
        "               \"Culmen Depth (mm)\", \"Culmen Length (mm)\"]\n",
        "# Setting y-axis\n",
        "ax[0].set(ylabel = \"Total Number Penguins\")\n",
        "\n",
        "for i in range (0,len(featureList)):\n",
        "  for j in penguins_clean[\"Species\"].unique():\n",
        "    df = penguins_clean[penguins_clean[\"Species\"] == j]\n",
        "    ax[i].set(xlabel = featureList[i])\n",
        "    ax[i].hist(df[featureList[i]], label = j, alpha = 0.25)\n",
        "\n",
        "plt.legend()\n",
        "fig.suptitle(\"Distrubution of Species per Categorical Variable\");"
      ],
      "metadata": {
        "id": "g6IYz8Fpy8dC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 370
        },
        "outputId": "df3398fc-8f1c-4e64-baf8-8f1a06b31a1a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x360 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The first significant visualization the histograms show is how the values of body mass, flipper length, and culmen length are relatively the same between the Gentoo and Chinstrap species. In other words, the Adelie species vary between the other species in regards to these features. Another feature the histogram illustrates is that the body mass for the Gentoo penguin species appears to be higher than the other species despite having a smaller culmen depth. Therefore, this provides some distinction for the Gentoo species. The last important feature of the histogram we observed is that the Adelie species varies from the other species in regards to culmen length. Thus, this provides some distinction for the Adelie species.\n",
        "\n",
        "Based on the histogram visualizations alone, it is difficult to successfully determine which quantitative features we should use for our models. However, if we had to decide solely based off of our initial observations discussed above, we would most likely use culmen length and culmen depth."
      ],
      "metadata": {
        "id": "JrODaUgz-XDr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "There appears to be interesting differences in the distribution of features within each species. To better understand how these species are clustered within all of these variables, we decided to create a scatterplot matrix of these four features. "
      ],
      "metadata": {
        "id": "-WbZ4dLrlYrk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px"
      ],
      "metadata": {
        "id": "jpe-wfu2mliJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig = px.scatter_matrix(penguins, dimensions=['Culmen Length (mm)', 'Culmen Depth (mm)', 'Flipper Length (mm)', 'Body Mass (g)'], color=\"Species\",\n",
        "                        color_discrete_map={'Adelie': 'lightblue', 'Chinstrap': 'orange', 'Gentoo': 'green'})\n",
        "\n",
        "\n",
        "fig.update_layout(\n",
        "    title={\n",
        "        'text': \"Relationship between Variables Among Species\",\n",
        "        'xanchor': 'center',\n",
        "        'yanchor': 'top',\n",
        "        'x':0.5,},\n",
        "        \n",
        "    font=dict(\n",
        "        size=7,\n",
        "    ),\n",
        "\n",
        "    title_font_size = 15\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "i_utFkj1pNe9",
        "outputId": "a76a9e95-18cd-4f1b-9ba6-39757e649943"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"3697921e-6f47-44ff-b9df-31b8ff7d13a5\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"3697921e-6f47-44ff-b9df-31b8ff7d13a5\")) {                    Plotly.newPlot(                        \"3697921e-6f47-44ff-b9df-31b8ff7d13a5\",                        [{\"dimensions\":[{\"axis\":{\"matches\":true},\"label\":\"Culmen Length (mm)\",\"values\":[39.1,39.5,40.3,null,36.7,39.3,38.9,39.2,34.1,42.0,37.8,37.8,41.1,38.6,34.6,36.6,38.7,42.5,34.4,46.0,37.8,37.7,35.9,38.2,38.8,35.3,40.6,40.5,37.9,40.5,39.5,37.2,39.5,40.9,36.4,39.2,38.8,42.2,37.6,39.8,36.5,40.8,36.0,44.1,37.0,39.6,41.1,37.5,36.0,42.3,39.6,40.1,35.0,42.0,34.5,41.4,39.0,40.6,36.5,37.6,35.7,41.3,37.6,41.1,36.4,41.6,35.5,41.1,35.9,41.8,33.5,39.7,39.6,45.8,35.5,42.8,40.9,37.2,36.2,42.1,34.6,42.9,36.7,35.1,37.3,41.3,36.3,36.9,38.3,38.9,35.7,41.1,34.0,39.6,36.2,40.8,38.1,40.3,33.1,43.2,35.0,41.0,37.7,37.8,37.9,39.7,38.6,38.2,38.1,43.2,38.1,45.6,39.7,42.2,39.6,42.7,38.6,37.3,35.7,41.1,36.2,37.7,40.2,41.4,35.2,40.6,38.8,41.5,39.0,44.1,38.5,43.1,36.8,37.5,38.1,41.1,35.6,40.2,37.0,39.7,40.2,40.6,32.1,40.7,37.3,39.0,39.2,36.6,36.0,37.8,36.0,41.5]},{\"axis\":{\"matches\":true},\"label\":\"Culmen Depth (mm)\",\"values\":[18.7,17.4,18.0,null,19.3,20.6,17.8,19.6,18.1,20.2,17.1,17.3,17.6,21.2,21.1,17.8,19.0,20.7,18.4,21.5,18.3,18.7,19.2,18.1,17.2,18.9,18.6,17.9,18.6,18.9,16.7,18.1,17.8,18.9,17.0,21.1,20.0,18.5,19.3,19.1,18.0,18.4,18.5,19.7,16.9,18.8,19.0,18.9,17.9,21.2,17.7,18.9,17.9,19.5,18.1,18.6,17.5,18.8,16.6,19.1,16.9,21.1,17.0,18.2,17.1,18.0,16.2,19.1,16.6,19.4,19.0,18.4,17.2,18.9,17.5,18.5,16.8,19.4,16.1,19.1,17.2,17.6,18.8,19.4,17.8,20.3,19.5,18.6,19.2,18.8,18.0,18.1,17.1,18.1,17.3,18.9,18.6,18.5,16.1,18.5,17.9,20.0,16.0,20.0,18.6,18.9,17.2,20.0,17.0,19.0,16.5,20.3,17.7,19.5,20.7,18.3,17.0,20.5,17.0,18.6,17.2,19.8,17.0,18.5,15.9,19.0,17.6,18.3,17.1,18.0,17.9,19.2,18.5,18.5,17.6,17.5,17.5,20.1,16.5,17.9,17.1,17.2,15.5,17.0,16.8,18.7,18.6,18.4,17.8,18.1,17.1,18.5]},{\"axis\":{\"matches\":true},\"label\":\"Flipper Length (mm)\",\"values\":[181.0,186.0,195.0,null,193.0,190.0,181.0,195.0,193.0,190.0,186.0,180.0,182.0,191.0,198.0,185.0,195.0,197.0,184.0,194.0,174.0,180.0,189.0,185.0,180.0,187.0,183.0,187.0,172.0,180.0,178.0,178.0,188.0,184.0,195.0,196.0,190.0,180.0,181.0,184.0,182.0,195.0,186.0,196.0,185.0,190.0,182.0,179.0,190.0,191.0,186.0,188.0,190.0,200.0,187.0,191.0,186.0,193.0,181.0,194.0,185.0,195.0,185.0,192.0,184.0,192.0,195.0,188.0,190.0,198.0,190.0,190.0,196.0,197.0,190.0,195.0,191.0,184.0,187.0,195.0,189.0,196.0,187.0,193.0,191.0,194.0,190.0,189.0,189.0,190.0,202.0,205.0,185.0,186.0,187.0,208.0,190.0,196.0,178.0,192.0,192.0,203.0,183.0,190.0,193.0,184.0,199.0,190.0,181.0,197.0,198.0,191.0,193.0,197.0,191.0,196.0,188.0,199.0,189.0,189.0,187.0,198.0,176.0,202.0,186.0,199.0,191.0,195.0,191.0,210.0,190.0,197.0,193.0,199.0,187.0,190.0,191.0,200.0,185.0,193.0,193.0,187.0,188.0,190.0,192.0,185.0,190.0,184.0,195.0,193.0,187.0,201.0]},{\"axis\":{\"matches\":true},\"label\":\"Body Mass (g)\",\"values\":[3750.0,3800.0,3250.0,null,3450.0,3650.0,3625.0,4675.0,3475.0,4250.0,3300.0,3700.0,3200.0,3800.0,4400.0,3700.0,3450.0,4500.0,3325.0,4200.0,3400.0,3600.0,3800.0,3950.0,3800.0,3800.0,3550.0,3200.0,3150.0,3950.0,3250.0,3900.0,3300.0,3900.0,3325.0,4150.0,3950.0,3550.0,3300.0,4650.0,3150.0,3900.0,3100.0,4400.0,3000.0,4600.0,3425.0,2975.0,3450.0,4150.0,3500.0,4300.0,3450.0,4050.0,2900.0,3700.0,3550.0,3800.0,2850.0,3750.0,3150.0,4400.0,3600.0,4050.0,2850.0,3950.0,3350.0,4100.0,3050.0,4450.0,3600.0,3900.0,3550.0,4150.0,3700.0,4250.0,3700.0,3900.0,3550.0,4000.0,3200.0,4700.0,3800.0,4200.0,3350.0,3550.0,3800.0,3500.0,3950.0,3600.0,3550.0,4300.0,3400.0,4450.0,3300.0,4300.0,3700.0,4350.0,2900.0,4100.0,3725.0,4725.0,3075.0,4250.0,2925.0,3550.0,3750.0,3900.0,3175.0,4775.0,3825.0,4600.0,3200.0,4275.0,3900.0,4075.0,2900.0,3775.0,3350.0,3325.0,3150.0,3500.0,3450.0,3875.0,3050.0,4000.0,3275.0,4300.0,3050.0,4000.0,3325.0,3500.0,3500.0,4475.0,3425.0,3900.0,3175.0,3975.0,3400.0,4250.0,3400.0,3475.0,3050.0,3725.0,3000.0,3650.0,4250.0,3475.0,3450.0,3750.0,3700.0,4000.0]}],\"hovertemplate\":\"Species=Adelie<br>%{xaxis.title.text}=%{x}<br>%{yaxis.title.text}=%{y}<extra></extra>\",\"legendgroup\":\"Adelie\",\"marker\":{\"color\":\"lightblue\",\"symbol\":\"circle\"},\"name\":\"Adelie\",\"showlegend\":true,\"type\":\"splom\"},{\"dimensions\":[{\"axis\":{\"matches\":true},\"label\":\"Culmen Length (mm)\",\"values\":[46.5,50.0,51.3,45.4,52.7,45.2,46.1,51.3,46.0,51.3,46.6,51.7,47.0,52.0,45.9,50.5,50.3,58.0,46.4,49.2,42.4,48.5,43.2,50.6,46.7,52.0,50.5,49.5,46.4,52.8,40.9,54.2,42.5,51.0,49.7,47.5,47.6,52.0,46.9,53.5,49.0,46.2,50.9,45.5,50.9,50.8,50.1,49.0,51.5,49.8,48.1,51.4,45.7,50.7,42.5,52.2,45.2,49.3,50.2,45.6,51.9,46.8,45.7,55.8,43.5,49.6,50.8,50.2]},{\"axis\":{\"matches\":true},\"label\":\"Culmen Depth (mm)\",\"values\":[17.9,19.5,19.2,18.7,19.8,17.8,18.2,18.2,18.9,19.9,17.8,20.3,17.3,18.1,17.1,19.6,20.0,17.8,18.6,18.2,17.3,17.5,16.6,19.4,17.9,19.0,18.4,19.0,17.8,20.0,16.6,20.8,16.7,18.8,18.6,16.8,18.3,20.7,16.6,19.9,19.5,17.5,19.1,17.0,17.9,18.5,17.9,19.6,18.7,17.3,16.4,19.0,17.3,19.7,17.3,18.8,16.6,19.9,18.8,19.4,19.5,16.5,17.0,19.8,18.1,18.2,19.0,18.7]},{\"axis\":{\"matches\":true},\"label\":\"Flipper Length (mm)\",\"values\":[192.0,196.0,193.0,188.0,197.0,198.0,178.0,197.0,195.0,198.0,193.0,194.0,185.0,201.0,190.0,201.0,197.0,181.0,190.0,195.0,181.0,191.0,187.0,193.0,195.0,197.0,200.0,200.0,191.0,205.0,187.0,201.0,187.0,203.0,195.0,199.0,195.0,210.0,192.0,205.0,210.0,187.0,196.0,196.0,196.0,201.0,190.0,212.0,187.0,198.0,199.0,201.0,193.0,203.0,187.0,197.0,191.0,203.0,202.0,194.0,206.0,189.0,195.0,207.0,202.0,193.0,210.0,198.0]},{\"axis\":{\"matches\":true},\"label\":\"Body Mass (g)\",\"values\":[3500.0,3900.0,3650.0,3525.0,3725.0,3950.0,3250.0,3750.0,4150.0,3700.0,3800.0,3775.0,3700.0,4050.0,3575.0,4050.0,3300.0,3700.0,3450.0,4400.0,3600.0,3400.0,2900.0,3800.0,3300.0,4150.0,3400.0,3800.0,3700.0,4550.0,3200.0,4300.0,3350.0,4100.0,3600.0,3900.0,3850.0,4800.0,2700.0,4500.0,3950.0,3650.0,3550.0,3500.0,3675.0,4450.0,3400.0,4300.0,3250.0,3675.0,3325.0,3950.0,3600.0,4050.0,3350.0,3450.0,3250.0,4050.0,3800.0,3525.0,3950.0,3650.0,3650.0,4000.0,3400.0,3775.0,4100.0,3775.0]}],\"hovertemplate\":\"Species=Chinstrap<br>%{xaxis.title.text}=%{x}<br>%{yaxis.title.text}=%{y}<extra></extra>\",\"legendgroup\":\"Chinstrap\",\"marker\":{\"color\":\"orange\",\"symbol\":\"circle\"},\"name\":\"Chinstrap\",\"showlegend\":true,\"type\":\"splom\"},{\"dimensions\":[{\"axis\":{\"matches\":true},\"label\":\"Culmen Length (mm)\",\"values\":[46.1,50.0,48.7,50.0,47.6,46.5,45.4,46.7,43.3,46.8,40.9,49.0,45.5,48.4,45.8,49.3,42.0,49.2,46.2,48.7,50.2,45.1,46.5,46.3,42.9,46.1,44.5,47.8,48.2,50.0,47.3,42.8,45.1,59.6,49.1,48.4,42.6,44.4,44.0,48.7,42.7,49.6,45.3,49.6,50.5,43.6,45.5,50.5,44.9,45.2,46.6,48.5,45.1,50.1,46.5,45.0,43.8,45.5,43.2,50.4,45.3,46.2,45.7,54.3,45.8,49.8,46.2,49.5,43.5,50.7,47.7,46.4,48.2,46.5,46.4,48.6,47.5,51.1,45.2,45.2,49.1,52.5,47.4,50.0,44.9,50.8,43.4,51.3,47.5,52.1,47.5,52.2,45.5,49.5,44.5,50.8,49.4,46.9,48.4,51.1,48.5,55.9,47.2,49.1,47.3,46.8,41.7,53.4,43.3,48.1,50.5,49.8,43.5,51.5,46.2,55.1,48.8,47.2,null,46.8,50.4,45.2,49.9]},{\"axis\":{\"matches\":true},\"label\":\"Culmen Depth (mm)\",\"values\":[13.2,16.3,14.1,15.2,14.5,13.5,14.6,15.3,13.4,15.4,13.7,16.1,13.7,14.6,14.6,15.7,13.5,15.2,14.5,15.1,14.3,14.5,14.5,15.8,13.1,15.1,14.3,15.0,14.3,15.3,15.3,14.2,14.5,17.0,14.8,16.3,13.7,17.3,13.6,15.7,13.7,16.0,13.7,15.0,15.9,13.9,13.9,15.9,13.3,15.8,14.2,14.1,14.4,15.0,14.4,15.4,13.9,15.0,14.5,15.3,13.8,14.9,13.9,15.7,14.2,16.8,14.4,16.2,14.2,15.0,15.0,15.6,15.6,14.8,15.0,16.0,14.2,16.3,13.8,16.4,14.5,15.6,14.6,15.9,13.8,17.3,14.4,14.2,14.0,17.0,15.0,17.1,14.5,16.1,14.7,15.7,15.8,14.6,14.4,16.5,15.0,17.0,15.5,15.0,13.8,16.1,14.7,15.8,14.0,15.1,15.2,15.9,15.2,16.3,14.1,16.0,16.2,13.7,null,14.3,15.7,14.8,16.1]},{\"axis\":{\"matches\":true},\"label\":\"Flipper Length (mm)\",\"values\":[211.0,230.0,210.0,218.0,215.0,210.0,211.0,219.0,209.0,215.0,214.0,216.0,214.0,213.0,210.0,217.0,210.0,221.0,209.0,222.0,218.0,215.0,213.0,215.0,215.0,215.0,216.0,215.0,210.0,220.0,222.0,209.0,207.0,230.0,220.0,220.0,213.0,219.0,208.0,208.0,208.0,225.0,210.0,216.0,222.0,217.0,210.0,225.0,213.0,215.0,210.0,220.0,210.0,225.0,217.0,220.0,208.0,220.0,208.0,224.0,208.0,221.0,214.0,231.0,219.0,230.0,214.0,229.0,220.0,223.0,216.0,221.0,221.0,217.0,216.0,230.0,209.0,220.0,215.0,223.0,212.0,221.0,212.0,224.0,212.0,228.0,218.0,218.0,212.0,230.0,218.0,228.0,212.0,224.0,214.0,226.0,216.0,222.0,203.0,225.0,219.0,228.0,215.0,228.0,216.0,215.0,210.0,219.0,208.0,209.0,216.0,229.0,213.0,230.0,217.0,230.0,222.0,214.0,null,215.0,222.0,212.0,213.0]},{\"axis\":{\"matches\":true},\"label\":\"Body Mass (g)\",\"values\":[4500.0,5700.0,4450.0,5700.0,5400.0,4550.0,4800.0,5200.0,4400.0,5150.0,4650.0,5550.0,4650.0,5850.0,4200.0,5850.0,4150.0,6300.0,4800.0,5350.0,5700.0,5000.0,4400.0,5050.0,5000.0,5100.0,4100.0,5650.0,4600.0,5550.0,5250.0,4700.0,5050.0,6050.0,5150.0,5400.0,4950.0,5250.0,4350.0,5350.0,3950.0,5700.0,4300.0,4750.0,5550.0,4900.0,4200.0,5400.0,5100.0,5300.0,4850.0,5300.0,4400.0,5000.0,4900.0,5050.0,4300.0,5000.0,4450.0,5550.0,4200.0,5300.0,4400.0,5650.0,4700.0,5700.0,4650.0,5800.0,4700.0,5550.0,4750.0,5000.0,5100.0,5200.0,4700.0,5800.0,4600.0,6000.0,4750.0,5950.0,4625.0,5450.0,4725.0,5350.0,4750.0,5600.0,4600.0,5300.0,4875.0,5550.0,4950.0,5400.0,4750.0,5650.0,4850.0,5200.0,4925.0,4875.0,4625.0,5250.0,4850.0,5600.0,4975.0,5500.0,4725.0,5500.0,4700.0,5500.0,4575.0,5500.0,5000.0,5950.0,4650.0,5500.0,4375.0,5850.0,6000.0,4925.0,null,4850.0,5750.0,5200.0,5400.0]}],\"hovertemplate\":\"Species=Gentoo<br>%{xaxis.title.text}=%{x}<br>%{yaxis.title.text}=%{y}<extra></extra>\",\"legendgroup\":\"Gentoo\",\"marker\":{\"color\":\"green\",\"symbol\":\"circle\"},\"name\":\"Gentoo\",\"showlegend\":true,\"type\":\"splom\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"legend\":{\"title\":{\"text\":\"Species\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"dragmode\":\"select\",\"title\":{\"font\":{\"size\":15},\"text\":\"Relationship between Variables Among Species\",\"xanchor\":\"center\",\"yanchor\":\"top\",\"x\":0.5},\"font\":{\"size\":7}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('3697921e-6f47-44ff-b9df-31b8ff7d13a5');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It appears that no matter the Flipper Length, Culmen Depth, or Culmen Length, the body mass of the Gentoo penguin is generally higher than that of the Adelie and Chinstrap. The opposite relationship is seen with Culmen Depth under the same conditions. While the Culmen Depths and Flipper Lengths remain in a similar range for the Adelie and Chinstrap, the Culmen Lengths for the Chinstrap remain generally larger than that of the Adelie, on par with the Gentoo. It seems that the Gentoo will generally be categorized by body masses greater than 4,000 g along with Culmen Depths lower than 17 mm. It also appears that Adelie penguins are categorized by Culmen Lengths shorter than 40 mm, Culmen Depths greater than 15 mm, Flipper Lengths under 200 mm, and body masses under 4,500 g. On the other hand, Chinstrap penguins can be categorized by Culmen lengths greater than 40 mm, Culmen Depths greater than 16 mm, Flipper Lengths lower than 250 mm, and body masses lower than 4,500 g. "
      ],
      "metadata": {
        "id": "iBupB1Vrr_cM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Overall, each one of these variables can be used as a predictor for the data. We will need a more involved approach to determine what combinations are the best, as some of these variables (like Culmen Depth) involve extreme overlap between two species and a clear seperation from only one. So far, none of these plots have shown a singular quantitative variable capable of seperating all three. We will use our Feature Selection section to help reach a conclusion. "
      ],
      "metadata": {
        "id": "hVSd_s3GqaPX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Within our Feature Selection section, we decided to narrow down our quantitative variables to just Culmen Length and Culmen Depth. Here's another EDA plot to help conceptualize their relationship:"
      ],
      "metadata": {
        "id": "lonUnKcilzgN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig = px.scatter(penguins_clean, x=\"Culmen Length (mm)\", y=\"Culmen Depth (mm)\", color=\"Species\", marginal_y=\"violin\",\n",
        "           marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\n",
        "\n",
        "fig.update_layout(\n",
        "    title={\n",
        "        'text': \"Relationship between Culmen Depth and Length Among Species\",\n",
        "        'xanchor': 'center',\n",
        "        'yanchor': 'top',\n",
        "        'x':0.37,})\n",
        "fig.show();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "-4Wl7QGpmHwD",
        "outputId": "653e06ab-d5ce-4cc7-d41a-232ed8f47076"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"47cba443-73b0-441a-aa93-30594c9af2b8\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"47cba443-73b0-441a-aa93-30594c9af2b8\")) {                    Plotly.newPlot(                        \"47cba443-73b0-441a-aa93-30594c9af2b8\",                        [{\"hovertemplate\":\"Species=Adelie<br>Culmen Length (mm)=%{x}<br>Culmen Depth (mm)=%{y}<extra></extra>\",\"legendgroup\":\"Adelie\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"Adelie\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[39.5,40.3,36.7,39.3,38.9,39.2,34.6,38.7,42.5,34.4,46.0,37.8,37.7,35.9,38.2,38.8,35.3,40.6,40.5,37.9,40.5,39.5,37.2,39.5,40.9,36.4,39.2,38.8,42.2,37.6,36.5,36.0,44.1,37.0,39.6,36.0,42.3,39.6,40.1,35.0,42.0,34.5,41.4,39.0,40.6,36.5,37.6,35.7,41.3,37.6,41.1,36.4,41.6,35.5,41.1,35.9,41.8,33.5,39.7,39.6,45.8,35.5,42.8,40.9,37.2,36.2,42.1,34.6,42.9,36.7,35.1,37.3,41.3,36.3,36.9,38.3,38.9,35.7,41.1,34.0,39.6,36.2,40.8,38.1,40.3,33.1,43.2,35.0,41.0,37.7,37.8,37.9,39.7,38.6,38.2,38.1,43.2,38.1,45.6,39.7,42.2,39.6,42.7,38.6,37.3,35.7,41.1,36.2,37.7,40.2,41.4,35.2,40.6,38.8,41.5,39.0,44.1,38.5,43.1,36.8,37.5,38.1,41.1,35.6,40.2,37.0,39.7,40.2,40.6,32.1,40.7,37.3,39.0,39.2,36.6,36.0,37.8,36.0,41.5],\"xaxis\":\"x\",\"y\":[17.4,18.0,19.3,20.6,17.8,19.6,21.1,19.0,20.7,18.4,21.5,18.3,18.7,19.2,18.1,17.2,18.9,18.6,17.9,18.6,18.9,16.7,18.1,17.8,18.9,17.0,21.1,20.0,18.5,19.3,18.0,18.5,19.7,16.9,18.8,17.9,21.2,17.7,18.9,17.9,19.5,18.1,18.6,17.5,18.8,16.6,19.1,16.9,21.1,17.0,18.2,17.1,18.0,16.2,19.1,16.6,19.4,19.0,18.4,17.2,18.9,17.5,18.5,16.8,19.4,16.1,19.1,17.2,17.6,18.8,19.4,17.8,20.3,19.5,18.6,19.2,18.8,18.0,18.1,17.1,18.1,17.3,18.9,18.6,18.5,16.1,18.5,17.9,20.0,16.0,20.0,18.6,18.9,17.2,20.0,17.0,19.0,16.5,20.3,17.7,19.5,20.7,18.3,17.0,20.5,17.0,18.6,17.2,19.8,17.0,18.5,15.9,19.0,17.6,18.3,17.1,18.0,17.9,19.2,18.5,18.5,17.6,17.5,17.5,20.1,16.5,17.9,17.1,17.2,15.5,17.0,16.8,18.7,18.6,18.4,17.8,18.1,17.1,18.5],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Species=Adelie<br>Culmen Length (mm)=%{x}<extra></extra>\",\"legendgroup\":\"Adelie\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"name\":\"Adelie\",\"notched\":true,\"offsetgroup\":\"Adelie\",\"showlegend\":false,\"x\":[39.5,40.3,36.7,39.3,38.9,39.2,34.6,38.7,42.5,34.4,46.0,37.8,37.7,35.9,38.2,38.8,35.3,40.6,40.5,37.9,40.5,39.5,37.2,39.5,40.9,36.4,39.2,38.8,42.2,37.6,36.5,36.0,44.1,37.0,39.6,36.0,42.3,39.6,40.1,35.0,42.0,34.5,41.4,39.0,40.6,36.5,37.6,35.7,41.3,37.6,41.1,36.4,41.6,35.5,41.1,35.9,41.8,33.5,39.7,39.6,45.8,35.5,42.8,40.9,37.2,36.2,42.1,34.6,42.9,36.7,35.1,37.3,41.3,36.3,36.9,38.3,38.9,35.7,41.1,34.0,39.6,36.2,40.8,38.1,40.3,33.1,43.2,35.0,41.0,37.7,37.8,37.9,39.7,38.6,38.2,38.1,43.2,38.1,45.6,39.7,42.2,39.6,42.7,38.6,37.3,35.7,41.1,36.2,37.7,40.2,41.4,35.2,40.6,38.8,41.5,39.0,44.1,38.5,43.1,36.8,37.5,38.1,41.1,35.6,40.2,37.0,39.7,40.2,40.6,32.1,40.7,37.3,39.0,39.2,36.6,36.0,37.8,36.0,41.5],\"xaxis\":\"x3\",\"yaxis\":\"y3\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Species=Adelie<br>Culmen Depth (mm)=%{y}<extra></extra>\",\"legendgroup\":\"Adelie\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"name\":\"Adelie\",\"offsetgroup\":\"Adelie\",\"scalegroup\":\"y\",\"showlegend\":false,\"xaxis\":\"x2\",\"y\":[17.4,18.0,19.3,20.6,17.8,19.6,21.1,19.0,20.7,18.4,21.5,18.3,18.7,19.2,18.1,17.2,18.9,18.6,17.9,18.6,18.9,16.7,18.1,17.8,18.9,17.0,21.1,20.0,18.5,19.3,18.0,18.5,19.7,16.9,18.8,17.9,21.2,17.7,18.9,17.9,19.5,18.1,18.6,17.5,18.8,16.6,19.1,16.9,21.1,17.0,18.2,17.1,18.0,16.2,19.1,16.6,19.4,19.0,18.4,17.2,18.9,17.5,18.5,16.8,19.4,16.1,19.1,17.2,17.6,18.8,19.4,17.8,20.3,19.5,18.6,19.2,18.8,18.0,18.1,17.1,18.1,17.3,18.9,18.6,18.5,16.1,18.5,17.9,20.0,16.0,20.0,18.6,18.9,17.2,20.0,17.0,19.0,16.5,20.3,17.7,19.5,20.7,18.3,17.0,20.5,17.0,18.6,17.2,19.8,17.0,18.5,15.9,19.0,17.6,18.3,17.1,18.0,17.9,19.2,18.5,18.5,17.6,17.5,17.5,20.1,16.5,17.9,17.1,17.2,15.5,17.0,16.8,18.7,18.6,18.4,17.8,18.1,17.1,18.5],\"yaxis\":\"y2\",\"type\":\"violin\"},{\"hovertemplate\":\"<b>OLS trendline</b><br>Culmen Depth (mm) = 0.17886 * Culmen Length (mm) + 11.3858<br>R<sup>2</sup>=0.156923<br><br>Species=Adelie<br>Culmen Length (mm)=%{x}<br>Culmen Depth (mm)=%{y} <b>(trend)</b><extra></extra>\",\"legendgroup\":\"Adelie\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Adelie\",\"showlegend\":false,\"x\":[32.1,33.1,33.5,34.0,34.4,34.5,34.6,34.6,35.0,35.0,35.1,35.2,35.3,35.5,35.5,35.6,35.7,35.7,35.7,35.9,35.9,36.0,36.0,36.0,36.0,36.2,36.2,36.2,36.3,36.4,36.4,36.5,36.5,36.6,36.7,36.7,36.8,36.9,37.0,37.0,37.2,37.2,37.3,37.3,37.3,37.5,37.6,37.6,37.6,37.7,37.7,37.7,37.8,37.8,37.8,37.9,37.9,38.1,38.1,38.1,38.1,38.2,38.2,38.3,38.5,38.6,38.6,38.7,38.8,38.8,38.8,38.9,38.9,39.0,39.0,39.0,39.2,39.2,39.2,39.3,39.5,39.5,39.5,39.6,39.6,39.6,39.6,39.6,39.7,39.7,39.7,39.7,40.1,40.2,40.2,40.2,40.3,40.3,40.5,40.5,40.6,40.6,40.6,40.6,40.7,40.8,40.9,40.9,41.0,41.1,41.1,41.1,41.1,41.1,41.3,41.3,41.4,41.4,41.5,41.5,41.6,41.8,42.0,42.1,42.2,42.2,42.3,42.5,42.7,42.8,42.9,43.1,43.2,43.2,44.1,44.1,45.6,45.8,46.0],\"xaxis\":\"x\",\"y\":[17.12723483184982,17.30609457399216,17.377638470849092,17.467068341920264,17.538612238777198,17.556498212991436,17.574384187205666,17.574384187205666,17.645928084062604,17.645928084062604,17.663814058276838,17.681700032491072,17.699586006705303,17.73535795513377,17.73535795513377,17.753243929348006,17.77112990356224,17.77112990356224,17.77112990356224,17.80690185199071,17.80690185199071,17.824787826204943,17.824787826204943,17.824787826204943,17.824787826204943,17.86055977463341,17.86055977463341,17.86055977463341,17.878445748847643,17.896331723061877,17.896331723061877,17.91421769727611,17.91421769727611,17.932103671490346,17.94998964570458,17.94998964570458,17.967875619918814,17.985761594133045,18.003647568347283,18.003647568347283,18.03941951677575,18.03941951677575,18.057305490989982,18.057305490989982,18.057305490989982,18.09307743941845,18.110963413632685,18.110963413632685,18.110963413632685,18.12884938784692,18.12884938784692,18.12884938784692,18.14673536206115,18.14673536206115,18.14673536206115,18.16462133627539,18.16462133627539,18.200393284703853,18.200393284703853,18.200393284703853,18.200393284703853,18.218279258918088,18.218279258918088,18.236165233132322,18.27193718156079,18.289823155775025,18.289823155775025,18.30770912998926,18.32559510420349,18.32559510420349,18.32559510420349,18.343481078417724,18.343481078417724,18.36136705263196,18.36136705263196,18.36136705263196,18.397139001060427,18.397139001060427,18.397139001060427,18.41502497527466,18.45079692370313,18.45079692370313,18.45079692370313,18.46868289791736,18.46868289791736,18.46868289791736,18.46868289791736,18.46868289791736,18.4865688721316,18.4865688721316,18.4865688721316,18.4865688721316,18.558112768988533,18.575998743202767,18.575998743202767,18.575998743202767,18.593884717416998,18.593884717416998,18.629656665845467,18.629656665845467,18.647542640059704,18.647542640059704,18.647542640059704,18.647542640059704,18.665428614273935,18.68331458848817,18.701200562702404,18.701200562702404,18.719086536916638,18.736972511130872,18.736972511130872,18.736972511130872,18.736972511130872,18.736972511130872,18.77274445955934,18.77274445955934,18.790630433773572,18.790630433773572,18.808516407987806,18.808516407987806,18.82640238220204,18.86217433063051,18.897946279058978,18.915832253273212,18.933718227487446,18.933718227487446,18.951604201701677,18.987376150130146,19.023148098558615,19.04103407277285,19.058920046987083,19.094691995415552,19.112577969629783,19.112577969629783,19.273551737557888,19.273551737557888,19.5418413507714,19.577613299199868,19.613385247628333],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"Species=Chinstrap<br>Culmen Length (mm)=%{x}<br>Culmen Depth (mm)=%{y}<extra></extra>\",\"legendgroup\":\"Chinstrap\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"Chinstrap\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[46.5,50.0,51.3,45.4,52.7,45.2,46.1,51.3,46.0,51.3,46.6,51.7,47.0,52.0,45.9,50.5,50.3,58.0,46.4,49.2,42.4,48.5,43.2,50.6,46.7,52.0,50.5,49.5,46.4,52.8,40.9,54.2,42.5,51.0,49.7,47.5,47.6,52.0,46.9,53.5,49.0,46.2,50.9,45.5,50.9,50.8,50.1,49.0,51.5,49.8,48.1,51.4,45.7,50.7,42.5,52.2,45.2,49.3,50.2,45.6,46.8,45.7,55.8,43.5,49.6,50.8,50.2],\"xaxis\":\"x\",\"y\":[17.9,19.5,19.2,18.7,19.8,17.8,18.2,18.2,18.9,19.9,17.8,20.3,17.3,18.1,17.1,19.6,20.0,17.8,18.6,18.2,17.3,17.5,16.6,19.4,17.9,19.0,18.4,19.0,17.8,20.0,16.6,20.8,16.7,18.8,18.6,16.8,18.3,20.7,16.6,19.9,19.5,17.5,19.1,17.0,17.9,18.5,17.9,19.6,18.7,17.3,16.4,19.0,17.3,19.7,17.3,18.8,16.6,19.9,18.8,19.4,16.5,17.0,19.8,18.1,18.2,19.0,18.7],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Species=Chinstrap<br>Culmen Length (mm)=%{x}<extra></extra>\",\"legendgroup\":\"Chinstrap\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"name\":\"Chinstrap\",\"notched\":true,\"offsetgroup\":\"Chinstrap\",\"showlegend\":false,\"x\":[46.5,50.0,51.3,45.4,52.7,45.2,46.1,51.3,46.0,51.3,46.6,51.7,47.0,52.0,45.9,50.5,50.3,58.0,46.4,49.2,42.4,48.5,43.2,50.6,46.7,52.0,50.5,49.5,46.4,52.8,40.9,54.2,42.5,51.0,49.7,47.5,47.6,52.0,46.9,53.5,49.0,46.2,50.9,45.5,50.9,50.8,50.1,49.0,51.5,49.8,48.1,51.4,45.7,50.7,42.5,52.2,45.2,49.3,50.2,45.6,46.8,45.7,55.8,43.5,49.6,50.8,50.2],\"xaxis\":\"x3\",\"yaxis\":\"y3\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Species=Chinstrap<br>Culmen Depth (mm)=%{y}<extra></extra>\",\"legendgroup\":\"Chinstrap\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"name\":\"Chinstrap\",\"offsetgroup\":\"Chinstrap\",\"scalegroup\":\"y\",\"showlegend\":false,\"xaxis\":\"x2\",\"y\":[17.9,19.5,19.2,18.7,19.8,17.8,18.2,18.2,18.9,19.9,17.8,20.3,17.3,18.1,17.1,19.6,20.0,17.8,18.6,18.2,17.3,17.5,16.6,19.4,17.9,19.0,18.4,19.0,17.8,20.0,16.6,20.8,16.7,18.8,18.6,16.8,18.3,20.7,16.6,19.9,19.5,17.5,19.1,17.0,17.9,18.5,17.9,19.6,18.7,17.3,16.4,19.0,17.3,19.7,17.3,18.8,16.6,19.9,18.8,19.4,16.5,17.0,19.8,18.1,18.2,19.0,18.7],\"yaxis\":\"y2\",\"type\":\"violin\"},{\"hovertemplate\":\"<b>OLS trendline</b><br>Culmen Depth (mm) = 0.220532 * Culmen Length (mm) + 7.64514<br>R<sup>2</sup>=0.421069<br><br>Species=Chinstrap<br>Culmen Length (mm)=%{x}<br>Culmen Depth (mm)=%{y} <b>(trend)</b><extra></extra>\",\"legendgroup\":\"Chinstrap\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Chinstrap\",\"showlegend\":false,\"x\":[40.9,42.4,42.5,42.5,43.2,43.5,45.2,45.2,45.4,45.5,45.6,45.7,45.7,45.9,46.0,46.1,46.2,46.4,46.4,46.5,46.6,46.7,46.8,46.9,47.0,47.5,47.6,48.1,48.5,49.0,49.0,49.2,49.3,49.5,49.6,49.7,49.8,50.0,50.1,50.2,50.2,50.3,50.5,50.5,50.6,50.7,50.8,50.8,50.9,50.9,51.0,51.3,51.3,51.3,51.4,51.5,51.7,52.0,52.0,52.0,52.2,52.7,52.8,53.5,54.2,55.8,58.0],\"xaxis\":\"x\",\"y\":[16.66490688823106,16.995705105322408,17.017758319795163,17.017758319795163,17.17213082110446,17.238290464522727,17.613195110559587,17.613195110559587,17.6573015395051,17.679354753977858,17.701407968450617,17.723461182923373,17.723461182923373,17.767567611868884,17.78962082634164,17.811674040814395,17.83372725528715,17.877833684232666,17.877833684232666,17.89988689870542,17.92194011317818,17.943993327650936,17.966046542123692,17.988099756596448,18.010152971069203,18.12041904343299,18.142472257905744,18.252738330269526,18.340951188160552,18.45121726052433,18.45121726052433,18.49532368946985,18.5173769039426,18.561483332888116,18.583536547360872,18.605589761833627,18.627642976306383,18.671749405251898,18.693802619724654,18.715855834197413,18.715855834197413,18.73790904867017,18.78201547761568,18.78201547761568,18.804068692088435,18.82612190656119,18.848175121033947,18.848175121033947,18.870228335506706,18.870228335506706,18.89228154997946,18.958441193397732,18.958441193397732,18.958441193397732,18.980494407870488,19.002547622343243,19.04665405128876,19.11281369470703,19.11281369470703,19.11281369470703,19.15692012365254,19.267186196016322,19.289239410489078,19.44361191179837,19.597984413107667,19.950835844671772,20.43600656307241],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"Species=Gentoo<br>Culmen Length (mm)=%{x}<br>Culmen Depth (mm)=%{y}<extra></extra>\",\"legendgroup\":\"Gentoo\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"Gentoo\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[46.1,50.0,48.7,50.0,47.6,46.5,45.4,46.7,43.3,46.8,40.9,49.0,45.5,48.4,45.8,49.3,42.0,49.2,46.2,48.7,50.2,45.1,46.5,46.3,42.9,46.1,47.8,48.2,50.0,42.8,45.1,59.6,49.1,48.4,42.6,44.4,44.0,48.7,42.7,49.6,45.3,49.6,50.5,43.6,45.5,50.5,44.9,45.2,46.6,48.5,45.1,50.1,46.5,45.0,43.8,45.5,43.2,50.4,45.3,46.2,45.7,54.3,45.8,49.8,49.5,43.5,50.7,47.7,46.4,48.2,46.5,46.4,48.6,47.5,51.1,45.2,45.2,49.1,52.5,47.4,50.0,44.9,50.8,43.4,51.3,47.5,52.1,47.5,52.2,45.5,49.5,44.5,50.8,49.4,46.9,48.4,51.1,48.5,55.9,47.2,49.1,46.8,41.7,53.4,43.3,48.1,50.5,49.8,43.5,51.5,46.2,55.1,48.8,47.2,46.8,50.4,45.2,49.9],\"xaxis\":\"x\",\"y\":[13.2,16.3,14.1,15.2,14.5,13.5,14.6,15.3,13.4,15.4,13.7,16.1,13.7,14.6,14.6,15.7,13.5,15.2,14.5,15.1,14.3,14.5,14.5,15.8,13.1,15.1,15.0,14.3,15.3,14.2,14.5,17.0,14.8,16.3,13.7,17.3,13.6,15.7,13.7,16.0,13.7,15.0,15.9,13.9,13.9,15.9,13.3,15.8,14.2,14.1,14.4,15.0,14.4,15.4,13.9,15.0,14.5,15.3,13.8,14.9,13.9,15.7,14.2,16.8,16.2,14.2,15.0,15.0,15.6,15.6,14.8,15.0,16.0,14.2,16.3,13.8,16.4,14.5,15.6,14.6,15.9,13.8,17.3,14.4,14.2,14.0,17.0,15.0,17.1,14.5,16.1,14.7,15.7,15.8,14.6,14.4,16.5,15.0,17.0,15.5,15.0,16.1,14.7,15.8,14.0,15.1,15.2,15.9,15.2,16.3,14.1,16.0,16.2,13.7,14.3,15.7,14.8,16.1],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Species=Gentoo<br>Culmen Length (mm)=%{x}<extra></extra>\",\"legendgroup\":\"Gentoo\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"name\":\"Gentoo\",\"notched\":true,\"offsetgroup\":\"Gentoo\",\"showlegend\":false,\"x\":[46.1,50.0,48.7,50.0,47.6,46.5,45.4,46.7,43.3,46.8,40.9,49.0,45.5,48.4,45.8,49.3,42.0,49.2,46.2,48.7,50.2,45.1,46.5,46.3,42.9,46.1,47.8,48.2,50.0,42.8,45.1,59.6,49.1,48.4,42.6,44.4,44.0,48.7,42.7,49.6,45.3,49.6,50.5,43.6,45.5,50.5,44.9,45.2,46.6,48.5,45.1,50.1,46.5,45.0,43.8,45.5,43.2,50.4,45.3,46.2,45.7,54.3,45.8,49.8,49.5,43.5,50.7,47.7,46.4,48.2,46.5,46.4,48.6,47.5,51.1,45.2,45.2,49.1,52.5,47.4,50.0,44.9,50.8,43.4,51.3,47.5,52.1,47.5,52.2,45.5,49.5,44.5,50.8,49.4,46.9,48.4,51.1,48.5,55.9,47.2,49.1,46.8,41.7,53.4,43.3,48.1,50.5,49.8,43.5,51.5,46.2,55.1,48.8,47.2,46.8,50.4,45.2,49.9],\"xaxis\":\"x3\",\"yaxis\":\"y3\",\"type\":\"box\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Species=Gentoo<br>Culmen Depth (mm)=%{y}<extra></extra>\",\"legendgroup\":\"Gentoo\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"name\":\"Gentoo\",\"offsetgroup\":\"Gentoo\",\"scalegroup\":\"y\",\"showlegend\":false,\"xaxis\":\"x2\",\"y\":[13.2,16.3,14.1,15.2,14.5,13.5,14.6,15.3,13.4,15.4,13.7,16.1,13.7,14.6,14.6,15.7,13.5,15.2,14.5,15.1,14.3,14.5,14.5,15.8,13.1,15.1,15.0,14.3,15.3,14.2,14.5,17.0,14.8,16.3,13.7,17.3,13.6,15.7,13.7,16.0,13.7,15.0,15.9,13.9,13.9,15.9,13.3,15.8,14.2,14.1,14.4,15.0,14.4,15.4,13.9,15.0,14.5,15.3,13.8,14.9,13.9,15.7,14.2,16.8,16.2,14.2,15.0,15.0,15.6,15.6,14.8,15.0,16.0,14.2,16.3,13.8,16.4,14.5,15.6,14.6,15.9,13.8,17.3,14.4,14.2,14.0,17.0,15.0,17.1,14.5,16.1,14.7,15.7,15.8,14.6,14.4,16.5,15.0,17.0,15.5,15.0,16.1,14.7,15.8,14.0,15.1,15.2,15.9,15.2,16.3,14.1,16.0,16.2,13.7,14.3,15.7,14.8,16.1],\"yaxis\":\"y2\",\"type\":\"violin\"},{\"hovertemplate\":\"<b>OLS trendline</b><br>Culmen Depth (mm) = 0.207697 * Culmen Length (mm) + 5.11386<br>R<sup>2</sup>=0.428417<br><br>Species=Gentoo<br>Culmen Length (mm)=%{x}<br>Culmen Depth (mm)=%{y} <b>(trend)</b><extra></extra>\",\"legendgroup\":\"Gentoo\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Gentoo\",\"showlegend\":false,\"x\":[40.9,41.7,42.0,42.6,42.7,42.8,42.9,43.2,43.3,43.3,43.4,43.5,43.5,43.6,43.8,44.0,44.4,44.5,44.9,44.9,45.0,45.1,45.1,45.1,45.2,45.2,45.2,45.2,45.3,45.3,45.4,45.5,45.5,45.5,45.5,45.7,45.8,45.8,46.1,46.1,46.2,46.2,46.2,46.3,46.4,46.4,46.5,46.5,46.5,46.5,46.6,46.7,46.8,46.8,46.8,46.9,47.2,47.2,47.4,47.5,47.5,47.5,47.6,47.7,47.8,48.1,48.2,48.2,48.4,48.4,48.4,48.5,48.5,48.6,48.7,48.7,48.7,48.8,49.0,49.1,49.1,49.1,49.2,49.3,49.4,49.5,49.5,49.6,49.6,49.8,49.8,49.9,50.0,50.0,50.0,50.0,50.1,50.2,50.4,50.4,50.5,50.5,50.5,50.7,50.8,50.8,51.1,51.1,51.3,51.5,52.1,52.2,52.5,53.4,54.3,55.1,55.9,59.6],\"xaxis\":\"x\",\"y\":[13.608659329438748,13.774816818069137,13.837125876305532,13.961743992778324,13.982513678857122,14.003283364935921,14.02405305101472,14.086362109251116,14.107131795329913,14.107131795329913,14.127901481408712,14.14867116748751,14.14867116748751,14.16944085356631,14.210980225723906,14.252519597881504,14.335598342196699,14.356368028275497,14.43944677259069,14.43944677259069,14.460216458669489,14.48098614474829,14.48098614474829,14.48098614474829,14.501755830827088,14.501755830827088,14.501755830827088,14.501755830827088,14.522525516905885,14.522525516905885,14.543295202984684,14.564064889063483,14.564064889063483,14.564064889063483,14.564064889063483,14.60560426122108,14.626373947299879,14.626373947299879,14.688683005536275,14.688683005536275,14.709452691615073,14.709452691615073,14.709452691615073,14.73022237769387,14.750992063772669,14.750992063772669,14.771761749851468,14.771761749851468,14.771761749851468,14.771761749851468,14.792531435930268,14.813301122009067,14.834070808087864,14.834070808087864,14.834070808087864,14.854840494166663,14.917149552403059,14.917149552403059,14.958688924560656,14.979458610639455,14.979458610639455,14.979458610639455,15.000228296718253,15.020997982797052,15.041767668875849,15.104076727112247,15.124846413191046,15.124846413191046,15.166385785348641,15.166385785348641,15.166385785348641,15.18715547142744,15.18715547142744,15.207925157506239,15.228694843585037,15.228694843585037,15.228694843585037,15.249464529663836,15.291003901821433,15.311773587900232,15.311773587900232,15.311773587900232,15.33254327397903,15.353312960057828,15.374082646136626,15.394852332215427,15.394852332215427,15.415622018294226,15.415622018294226,15.457161390451821,15.457161390451821,15.47793107653062,15.498700762609419,15.498700762609419,15.498700762609419,15.498700762609419,15.519470448688217,15.540240134767016,15.581779506924613,15.581779506924613,15.602549193003412,15.602549193003412,15.602549193003412,15.64408856516101,15.664858251239806,15.664858251239806,15.727167309476204,15.727167309476204,15.7687066816338,15.810246053791397,15.93486417026419,15.955633856342988,16.017942914579386,16.20487008928857,16.39179726399776,16.55795475262815,16.724112241258535,17.492590626174085],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"rgb(36,36,36)\"},\"error_y\":{\"color\":\"rgb(36,36,36)\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"rgb(36,36,36)\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"rgb(36,36,36)\"},\"baxis\":{\"endlinecolor\":\"rgb(36,36,36)\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"rgb(36,36,36)\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.6}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"rgb(237,237,237)\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"rgb(217,217,217)\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"colorscale\":{\"diverging\":[[0.0,\"rgb(103,0,31)\"],[0.1,\"rgb(178,24,43)\"],[0.2,\"rgb(214,96,77)\"],[0.3,\"rgb(244,165,130)\"],[0.4,\"rgb(253,219,199)\"],[0.5,\"rgb(247,247,247)\"],[0.6,\"rgb(209,229,240)\"],[0.7,\"rgb(146,197,222)\"],[0.8,\"rgb(67,147,195)\"],[0.9,\"rgb(33,102,172)\"],[1.0,\"rgb(5,48,97)\"]],\"sequential\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"sequentialminus\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]]},\"colorway\":[\"#1F77B4\",\"#FF7F0E\",\"#2CA02C\",\"#D62728\",\"#9467BD\",\"#8C564B\",\"#E377C2\",\"#7F7F7F\",\"#BCBD22\",\"#17BECF\"],\"font\":{\"color\":\"rgb(36,36,36)\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"rgb(232,232,232)\",\"gridwidth\":2,\"linecolor\":\"rgb(36,36,36)\",\"showbackground\":true,\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"rgb(232,232,232)\",\"gridwidth\":2,\"linecolor\":\"rgb(36,36,36)\",\"showbackground\":true,\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"rgb(232,232,232)\",\"gridwidth\":2,\"linecolor\":\"rgb(36,36,36)\",\"showbackground\":true,\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"}},\"shapedefaults\":{\"fillcolor\":\"black\",\"line\":{\"width\":0},\"opacity\":0.3},\"ternary\":{\"aaxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"},\"baxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"title\":{\"standoff\":15},\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"title\":{\"standoff\":15},\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.7363],\"title\":{\"text\":\"Culmen Length (mm)\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,0.7326],\"title\":{\"text\":\"Culmen Depth (mm)\"}},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.7413,1.0],\"matches\":\"x2\",\"showticklabels\":false,\"showline\":false,\"ticks\":\"\"},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.0,0.7326],\"matches\":\"y\",\"showticklabels\":false},\"xaxis3\":{\"anchor\":\"y3\",\"domain\":[0.0,0.7363],\"matches\":\"x\",\"showticklabels\":false},\"yaxis3\":{\"anchor\":\"x3\",\"domain\":[0.7426,1.0],\"matches\":\"y3\",\"showticklabels\":false,\"showline\":false,\"ticks\":\"\"},\"xaxis4\":{\"anchor\":\"y4\",\"domain\":[0.7413,1.0],\"matches\":\"x2\",\"showticklabels\":false,\"showline\":false,\"ticks\":\"\"},\"yaxis4\":{\"anchor\":\"x4\",\"domain\":[0.7426,1.0],\"matches\":\"y3\",\"showticklabels\":false,\"showline\":false,\"ticks\":\"\"},\"legend\":{\"title\":{\"text\":\"Species\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"text\":\"Relationship between Culmen Depth and Length Among Species\",\"xanchor\":\"center\",\"yanchor\":\"top\",\"x\":0.37}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('47cba443-73b0-441a-aa93-30594c9af2b8');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This seems like a pretty good combination of variables. All three species share a similar positive, linear relationship and where the Chinstrap and Gentoo are similar in Length, they differ greatly in Depth. These distinctions should allow for a more accurate classification. "
      ],
      "metadata": {
        "id": "_D-V104Xpn_E"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Feature Selection**"
      ],
      "metadata": {
        "id": "0xXr8UqilQWc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since our initial EDA didn't narrow down our variables too much, we decided to write a function that would allow us to systematically select the best features. Our TA notified us that the Delta 13/15 variables were not useful, so we went ahead and dropped them from this section. For this part, we'll use our four quantitative variables from the last section and our two categorical variables and find the best three predictors of Species. "
      ],
      "metadata": {
        "id": "_t4Ad75FleHu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# split into train and test \n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train, test = train_test_split(penguins, test_size = .3)"
      ],
      "metadata": {
        "id": "FR1izVhs_Egp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, y_train = data_clean(train, drop = [\"Comments\", \"Region\", \"Date Egg\", \"studyName\", \"Delta 15 N (o/oo)\", \n",
        "                                             \"Delta 13 C (o/oo)\", \"Sample Number\", \"Stage\", \"Individual ID\", \"Clutch Completion\"], test = True)\n",
        "X_test,  y_test  = data_clean(test, drop = [\"Comments\", \"Region\", \"Date Egg\", \"studyName\", \"Delta 15 N (o/oo)\", \n",
        "                \"Delta 13 C (o/oo)\", \"Sample Number\", \"Stage\", \"Individual ID\",\n",
        "                \"Clutch Completion\"], test = True)"
      ],
      "metadata": {
        "id": "qHUbsybL-1c5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "iIP2daeV_Kok",
        "outputId": "470da5ab-7e2d-4719-ab1e-05eafea24dc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Island  Culmen Length (mm)  Culmen Depth (mm)  Flipper Length (mm)  \\\n",
              "330       0                50.5               15.2                216.0   \n",
              "33        1                40.9               18.9                184.0   \n",
              "97        1                40.3               18.5                196.0   \n",
              "129       2                44.1               18.0                210.0   \n",
              "265       0                43.6               13.9                217.0   \n",
              "..      ...                 ...                ...                  ...   \n",
              "209       1                49.3               19.9                203.0   \n",
              "183       1                54.2               20.8                201.0   \n",
              "116       2                38.6               17.0                188.0   \n",
              "137       1                40.2               20.1                200.0   \n",
              "216       1                43.5               18.1                202.0   \n",
              "\n",
              "     Body Mass (g)  Sex  \n",
              "330         5000.0    0  \n",
              "33          3900.0    1  \n",
              "97          4350.0    1  \n",
              "129         4000.0    1  \n",
              "265         4900.0    0  \n",
              "..             ...  ...  \n",
              "209         4050.0    1  \n",
              "183         4300.0    1  \n",
              "116         2900.0    0  \n",
              "137         3975.0    1  \n",
              "216         3400.0    0  \n",
              "\n",
              "[234 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-40b81a79-9424-490b-8844-37061a6da73c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Island</th>\n",
              "      <th>Culmen Length (mm)</th>\n",
              "      <th>Culmen Depth (mm)</th>\n",
              "      <th>Flipper Length (mm)</th>\n",
              "      <th>Body Mass (g)</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>330</th>\n",
              "      <td>0</td>\n",
              "      <td>50.5</td>\n",
              "      <td>15.2</td>\n",
              "      <td>216.0</td>\n",
              "      <td>5000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>1</td>\n",
              "      <td>40.9</td>\n",
              "      <td>18.9</td>\n",
              "      <td>184.0</td>\n",
              "      <td>3900.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>1</td>\n",
              "      <td>40.3</td>\n",
              "      <td>18.5</td>\n",
              "      <td>196.0</td>\n",
              "      <td>4350.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>129</th>\n",
              "      <td>2</td>\n",
              "      <td>44.1</td>\n",
              "      <td>18.0</td>\n",
              "      <td>210.0</td>\n",
              "      <td>4000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>265</th>\n",
              "      <td>0</td>\n",
              "      <td>43.6</td>\n",
              "      <td>13.9</td>\n",
              "      <td>217.0</td>\n",
              "      <td>4900.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>209</th>\n",
              "      <td>1</td>\n",
              "      <td>49.3</td>\n",
              "      <td>19.9</td>\n",
              "      <td>203.0</td>\n",
              "      <td>4050.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>183</th>\n",
              "      <td>1</td>\n",
              "      <td>54.2</td>\n",
              "      <td>20.8</td>\n",
              "      <td>201.0</td>\n",
              "      <td>4300.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116</th>\n",
              "      <td>2</td>\n",
              "      <td>38.6</td>\n",
              "      <td>17.0</td>\n",
              "      <td>188.0</td>\n",
              "      <td>2900.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>137</th>\n",
              "      <td>1</td>\n",
              "      <td>40.2</td>\n",
              "      <td>20.1</td>\n",
              "      <td>200.0</td>\n",
              "      <td>3975.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>216</th>\n",
              "      <td>1</td>\n",
              "      <td>43.5</td>\n",
              "      <td>18.1</td>\n",
              "      <td>202.0</td>\n",
              "      <td>3400.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>234 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40b81a79-9424-490b-8844-37061a6da73c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-40b81a79-9424-490b-8844-37061a6da73c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-40b81a79-9424-490b-8844-37061a6da73c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0fQvBv3W7I2J",
        "outputId": "8cc5e592-3b5b-4207-e05e-e8a5916078a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "330    2\n",
              "33     0\n",
              "97     0\n",
              "129    0\n",
              "265    2\n",
              "      ..\n",
              "209    1\n",
              "183    1\n",
              "116    0\n",
              "137    0\n",
              "216    1\n",
              "Name: Species, Length: 234, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 148
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Our training and testing data looks good! Let's now see all the possible combinations of 3 variables that involve at least one qualitative variable (either Sex or Island)."
      ],
      "metadata": {
        "id": "KL3J60eu7Mz9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cols = list(X_train.columns) # make a list of all of the predictor variables\n",
        "cols"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bDOHOIzM7K2W",
        "outputId": "6aaac2f2-bc70-4df2-80b6-2505bd40c4b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Island',\n",
              " 'Culmen Length (mm)',\n",
              " 'Culmen Depth (mm)',\n",
              " 'Flipper Length (mm)',\n",
              " 'Body Mass (g)',\n",
              " 'Sex']"
            ]
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# use the combinations function to determine all possible combinations of the data to a max list of 3\n",
        "from itertools import combinations\n",
        "output = sum([list(map(list, combinations(cols, 3))) for i in range(len(cols) + 1)], []) "
      ],
      "metadata": {
        "id": "z3S1jdUeKPC8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since order matters within this function, but not for the purposes of the actual model, we should sort the output list and then remove all duplicates. We should also remove any combinations that do not involve a single qualitative variable."
      ],
      "metadata": {
        "id": "bkzhegCT8Fc6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "output_categorical = []\n",
        "\n",
        "# makes sure at least one quantitative variable is present\n",
        "for i in output:\n",
        "  if (\"Island\" in i) or (\"Sex\" in i):\n",
        "    output_categorical.append(i)\n"
      ],
      "metadata": {
        "id": "jNp5WmvACzaQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "non_duplicate_output = []\n",
        "output_categorical.sort() \n",
        "for i in output_categorical:\n",
        "  # makes sure that there are no duplicate outputs \n",
        "  if i not in non_duplicate_output:\n",
        "    non_duplicate_output.append(i)"
      ],
      "metadata": {
        "id": "8nytVa1XI4Qz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(non_duplicate_output)\n",
        "len(non_duplicate_output)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ERLlpf_rIrIR",
        "outputId": "7949fc33-8ab2-4acf-8bbc-fec5b00a9e97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[['Culmen Depth (mm)', 'Body Mass (g)', 'Sex'], ['Culmen Depth (mm)', 'Flipper Length (mm)', 'Sex'], ['Culmen Length (mm)', 'Body Mass (g)', 'Sex'], ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Sex'], ['Culmen Length (mm)', 'Flipper Length (mm)', 'Sex'], ['Flipper Length (mm)', 'Body Mass (g)', 'Sex'], ['Island', 'Body Mass (g)', 'Sex'], ['Island', 'Culmen Depth (mm)', 'Body Mass (g)'], ['Island', 'Culmen Depth (mm)', 'Flipper Length (mm)'], ['Island', 'Culmen Depth (mm)', 'Sex'], ['Island', 'Culmen Length (mm)', 'Body Mass (g)'], ['Island', 'Culmen Length (mm)', 'Culmen Depth (mm)'], ['Island', 'Culmen Length (mm)', 'Flipper Length (mm)'], ['Island', 'Culmen Length (mm)', 'Sex'], ['Island', 'Flipper Length (mm)', 'Body Mass (g)'], ['Island', 'Flipper Length (mm)', 'Sex']]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "16"
            ]
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As we can see, there are only 16 possible combinations that need to be tested. Let's actually run a linear regression and find which are the most relevant combinations. "
      ],
      "metadata": {
        "id": "npyCQYrM8uyJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import cross_val_score"
      ],
      "metadata": {
        "id": "z99PpBVdBv5R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def check_column_score(cols):\n",
        "    \"\"\"\n",
        "    Trains and evaluates a model via cross-validation on the columns of the data\n",
        "    with selected indices\n",
        "    \"\"\"\n",
        "    print(\"training with columns \" + str(cols))\n",
        "\n",
        "    LR = LogisticRegression(max_iter=5000)\n",
        "    return cross_val_score(LR, X_train[cols], y_train, cv = 5).mean() "
      ],
      "metadata": {
        "id": "K49LtYdTAL8y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def test_column_score(cols):\n",
        "    \"\"\"\n",
        "    Trains and evaluates a model on the test set using the columns of the data\n",
        "    with selected indices\n",
        "    \"\"\"\n",
        "    print(\"testing with columns \" + str(cols))\n",
        "    LR = LogisticRegression(max_iter=5000)\n",
        "    LR.fit(X_train[cols], y_train)\n",
        "    return LR.score(X_test[cols], y_test)"
      ],
      "metadata": {
        "id": "MIeC5vwhAMkz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def return_column_score(cols, train = True):\n",
        "    \"\"\"\n",
        "    Creates a dataframe of CV scores using the test_column_score \n",
        "    and check_column_score functions. \n",
        "    Inputs are the columns of interest and a boolean variable for train. \n",
        "    If train = False, will utlize the test_column_function to fit the \n",
        "    trained model onto the test dataset. \n",
        "    Output is a DataFrame with the top 5 CV scores.\n",
        "    \"\"\"\n",
        "    CV_scores = []\n",
        "\n",
        "    if train == True:\n",
        "      col_score = check_column_score     \n",
        "    \n",
        "    elif train == False:\n",
        "      col_score = test_column_score\n",
        "\n",
        "    for cols in non_duplicate_output:\n",
        "      x = col_score(cols)\n",
        "      CV_scores.append(str(np.round(x, 3)))\n",
        "    \n",
        "    CV_df = pd.DataFrame({\"Features\": non_duplicate_output, \"CV Score\": CV_scores}, columns=['Features','CV Score'])\n",
        "    CV_df = CV_df.sort_values('CV Score', ascending = False)\n",
        "\n",
        "    return CV_df.head()"
      ],
      "metadata": {
        "id": "53v26Lx1_iej"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "return_column_score(cols, train = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "id": "K1Pijc34-IKT",
        "outputId": "81991c73-e6ea-4092-9cf2-95b82d0770dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "training with columns ['Culmen Depth (mm)', 'Body Mass (g)', 'Sex']\n",
            "training with columns ['Culmen Depth (mm)', 'Flipper Length (mm)', 'Sex']\n",
            "training with columns ['Culmen Length (mm)', 'Body Mass (g)', 'Sex']\n",
            "training with columns ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Sex']\n",
            "training with columns ['Culmen Length (mm)', 'Flipper Length (mm)', 'Sex']\n",
            "training with columns ['Flipper Length (mm)', 'Body Mass (g)', 'Sex']\n",
            "training with columns ['Island', 'Body Mass (g)', 'Sex']\n",
            "training with columns ['Island', 'Culmen Depth (mm)', 'Body Mass (g)']\n",
            "training with columns ['Island', 'Culmen Depth (mm)', 'Flipper Length (mm)']\n",
            "training with columns ['Island', 'Culmen Depth (mm)', 'Sex']\n",
            "training with columns ['Island', 'Culmen Length (mm)', 'Body Mass (g)']\n",
            "training with columns ['Island', 'Culmen Length (mm)', 'Culmen Depth (mm)']\n",
            "training with columns ['Island', 'Culmen Length (mm)', 'Flipper Length (mm)']\n",
            "training with columns ['Island', 'Culmen Length (mm)', 'Sex']\n",
            "training with columns ['Island', 'Flipper Length (mm)', 'Body Mass (g)']\n",
            "training with columns ['Island', 'Flipper Length (mm)', 'Sex']\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                           Features CV Score\n",
              "3      [Culmen Length (mm), Culmen Depth (mm), Sex]    0.987\n",
              "13                [Island, Culmen Length (mm), Sex]    0.983\n",
              "2          [Culmen Length (mm), Body Mass (g), Sex]    0.974\n",
              "11  [Island, Culmen Length (mm), Culmen Depth (mm)]    0.974\n",
              "10      [Island, Culmen Length (mm), Body Mass (g)]     0.97"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea2da49a-6a42-4009-93d8-04614bb290b9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Features</th>\n",
              "      <th>CV Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[Culmen Length (mm), Culmen Depth (mm), Sex]</td>\n",
              "      <td>0.987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>[Island, Culmen Length (mm), Sex]</td>\n",
              "      <td>0.983</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[Culmen Length (mm), Body Mass (g), Sex]</td>\n",
              "      <td>0.974</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>[Island, Culmen Length (mm), Culmen Depth (mm)]</td>\n",
              "      <td>0.974</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>[Island, Culmen Length (mm), Body Mass (g)]</td>\n",
              "      <td>0.97</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea2da49a-6a42-4009-93d8-04614bb290b9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ea2da49a-6a42-4009-93d8-04614bb290b9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ea2da49a-6a42-4009-93d8-04614bb290b9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "return_column_score(cols, train = False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "id": "fTKKmdT0-p-X",
        "outputId": "8b86d471-fb58-4abe-8f37-0da4565144fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "testing with columns ['Culmen Depth (mm)', 'Body Mass (g)', 'Sex']\n",
            "testing with columns ['Culmen Depth (mm)', 'Flipper Length (mm)', 'Sex']\n",
            "testing with columns ['Culmen Length (mm)', 'Body Mass (g)', 'Sex']\n",
            "testing with columns ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Sex']\n",
            "testing with columns ['Culmen Length (mm)', 'Flipper Length (mm)', 'Sex']\n",
            "testing with columns ['Flipper Length (mm)', 'Body Mass (g)', 'Sex']\n",
            "testing with columns ['Island', 'Body Mass (g)', 'Sex']\n",
            "testing with columns ['Island', 'Culmen Depth (mm)', 'Body Mass (g)']\n",
            "testing with columns ['Island', 'Culmen Depth (mm)', 'Flipper Length (mm)']\n",
            "testing with columns ['Island', 'Culmen Depth (mm)', 'Sex']\n",
            "testing with columns ['Island', 'Culmen Length (mm)', 'Body Mass (g)']\n",
            "testing with columns ['Island', 'Culmen Length (mm)', 'Culmen Depth (mm)']\n",
            "testing with columns ['Island', 'Culmen Length (mm)', 'Flipper Length (mm)']\n",
            "testing with columns ['Island', 'Culmen Length (mm)', 'Sex']\n",
            "testing with columns ['Island', 'Flipper Length (mm)', 'Body Mass (g)']\n",
            "testing with columns ['Island', 'Flipper Length (mm)', 'Sex']\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                             Features CV Score\n",
              "3        [Culmen Length (mm), Culmen Depth (mm), Sex]     0.99\n",
              "2            [Culmen Length (mm), Body Mass (g), Sex]     0.98\n",
              "11    [Island, Culmen Length (mm), Culmen Depth (mm)]     0.98\n",
              "10        [Island, Culmen Length (mm), Body Mass (g)]     0.97\n",
              "12  [Island, Culmen Length (mm), Flipper Length (mm)]    0.949"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8c34fde4-d86e-4f12-ba6f-9449124c3041\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Features</th>\n",
              "      <th>CV Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[Culmen Length (mm), Culmen Depth (mm), Sex]</td>\n",
              "      <td>0.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[Culmen Length (mm), Body Mass (g), Sex]</td>\n",
              "      <td>0.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>[Island, Culmen Length (mm), Culmen Depth (mm)]</td>\n",
              "      <td>0.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>[Island, Culmen Length (mm), Body Mass (g)]</td>\n",
              "      <td>0.97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>[Island, Culmen Length (mm), Flipper Length (mm)]</td>\n",
              "      <td>0.949</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c34fde4-d86e-4f12-ba6f-9449124c3041')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8c34fde4-d86e-4f12-ba6f-9449124c3041 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8c34fde4-d86e-4f12-ba6f-9449124c3041');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 159
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It appears that Culmen Length and Depth are by far the most accurate predictors, no matter the qualitative variable. The final vizualization within our EDA helps give more insight into why this may be. When it comes to selecting Island vs. Sex as the qualitative variable, the discussion gets more complicated. Our table in the EDA section suggested that Island is an extremely powerful predictor variable due to the limited distribution of penguins on each Island. Theoretically, we would see the same variations in the predictor variables between the sex for all species. "
      ],
      "metadata": {
        "id": "78F_BqySLlou"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "penguins_clean.groupby([\"Species\", \"Sex\"])[\"Sex\"].count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0smjvCHjHrUP",
        "outputId": "bbbff47d-feb0-4009-de22-56d732c1882d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Species    Sex\n",
              "Adelie     0      71\n",
              "           1      68\n",
              "Chinstrap  0      34\n",
              "           1      33\n",
              "Gentoo     0      58\n",
              "           1      60\n",
              "Name: Sex, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 160
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "penguins_clean.groupby([\"Species\", \"Island\"])[\"Island\"].count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u3c1aD-pJx9E",
        "outputId": "0430c2be-bb81-463b-adbb-e77e3e9e31b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Species    Island\n",
              "Adelie     0          44\n",
              "           1          52\n",
              "           2          43\n",
              "Chinstrap  1          67\n",
              "Gentoo     0         118\n",
              "Name: Island, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 161
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Given that there is a pretty even distribution between the sexes for each species and given that only certain species are seen on certain islands, we decided to use Island as a predictor variable. Its cross validation score compared to Sex was not very drastic and given our reasoning, Island seems more relevant.\n"
      ],
      "metadata": {
        "id": "MoZpHpiDJsFZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Modeling**"
      ],
      "metadata": {
        "id": "R7e4vsFxK3JM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **SVM Model**"
      ],
      "metadata": {
        "id": "HV0X3OztYHZg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Support Vector Machines are supervised machine learning algorithms that can be used to classify data. It creates decision boundaries by finding a hyperplane to deliniate seperation between points. Let's begin by creating testing and training datasets and fitting a basic SVM model."
      ],
      "metadata": {
        "id": "pAgHtxbIk5rS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# split into train and test \n",
        "\n",
        "train, test = train_test_split(penguins, test_size = .3)\n",
        "X_train, y_train = data_clean(train, drop = [\"Comments\", \"Region\", \"Date Egg\", \"studyName\", \"Delta 15 N (o/oo)\", \n",
        "                \"Delta 13 C (o/oo)\", \"Sample Number\", \"Stage\", \"Individual ID\",\n",
        "                \"Clutch Completion\", \"Body Mass (g)\", \"Sex\", \"Flipper Length (mm)\"], test = True)\n",
        "X_test,  y_test  = data_clean(test, drop = [\"Comments\", \"Region\", \"Date Egg\", \"studyName\", \"Delta 15 N (o/oo)\", \n",
        "                \"Delta 13 C (o/oo)\", \"Sample Number\", \"Stage\", \"Individual ID\",\n",
        "                \"Clutch Completion\", \"Body Mass (g)\", \"Sex\", \"Flipper Length (mm)\"], test = True)"
      ],
      "metadata": {
        "id": "rnmk8DjIQVAu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "zMGm3-aXQb2d",
        "outputId": "f8bdf89f-4339-47d5-b4b6-dd9137369a2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Island  Culmen Length (mm)  Culmen Depth (mm)\n",
              "293       0                46.5               14.8\n",
              "133       1                37.5               18.5\n",
              "196       1                50.9               17.9\n",
              "188       1                47.6               18.3\n",
              "16        2                38.7               19.0\n",
              "..      ...                 ...                ...\n",
              "189       1                52.0               20.7\n",
              "1         2                39.5               17.4\n",
              "224       0                47.6               14.5\n",
              "228       0                43.3               13.4\n",
              "69        2                41.8               19.4\n",
              "\n",
              "[238 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9dc14cc0-68f9-4324-8c3c-6eaa287ac6ee\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Island</th>\n",
              "      <th>Culmen Length (mm)</th>\n",
              "      <th>Culmen Depth (mm)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>293</th>\n",
              "      <td>0</td>\n",
              "      <td>46.5</td>\n",
              "      <td>14.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>133</th>\n",
              "      <td>1</td>\n",
              "      <td>37.5</td>\n",
              "      <td>18.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>1</td>\n",
              "      <td>50.9</td>\n",
              "      <td>17.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188</th>\n",
              "      <td>1</td>\n",
              "      <td>47.6</td>\n",
              "      <td>18.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2</td>\n",
              "      <td>38.7</td>\n",
              "      <td>19.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>189</th>\n",
              "      <td>1</td>\n",
              "      <td>52.0</td>\n",
              "      <td>20.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>39.5</td>\n",
              "      <td>17.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>224</th>\n",
              "      <td>0</td>\n",
              "      <td>47.6</td>\n",
              "      <td>14.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>228</th>\n",
              "      <td>0</td>\n",
              "      <td>43.3</td>\n",
              "      <td>13.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>2</td>\n",
              "      <td>41.8</td>\n",
              "      <td>19.4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>238 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9dc14cc0-68f9-4324-8c3c-6eaa287ac6ee')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9dc14cc0-68f9-4324-8c3c-6eaa287ac6ee button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9dc14cc0-68f9-4324-8c3c-6eaa287ac6ee');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 163
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s-0GITg7P5vv",
        "outputId": "1380db82-6c88-4abc-a058-67727edd9e0c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "293    2\n",
              "133    0\n",
              "196    1\n",
              "188    1\n",
              "16     0\n",
              "      ..\n",
              "189    1\n",
              "1      0\n",
              "224    2\n",
              "228    2\n",
              "69     0\n",
              "Name: Species, Length: 238, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 164
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Looks good! Let's see what happens if we compute a generic SVM model without altering any parameters. By default, SVM will go with a radial basis function kernel, or rbf. This is a super complex algorithm that has been successful in many vector machine classification problems. \n",
        "To start, we will scale the data to bring the data points closer together. Datasets with points with high differences will take more time for the algorithm to process and can lead to lower accuracy. Scaling the distribution of the points can help optimize the model. Linear models or models with clustering and/or k-values can be highly affected by non-scaled data."
      ],
      "metadata": {
        "id": "zzUGfFHilb5M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "s3A6UlNvajJX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "# instantiate classifier with default parameters\n",
        "svc=SVC() \n",
        "\n",
        "# fit classifier to training set\n",
        "svc.fit(X_train,y_train)\n",
        "\n",
        "# make predictions on test set\n",
        "y_pred=svc.predict(X_test)\n",
        "\n",
        "# compute and print accuracy score\n",
        "print('Model accuracy score with default parameters: {0:0.4f}'. format(accuracy_score(y_test, y_pred)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZN-Sg2GvarvH",
        "outputId": "02feffc6-9edb-4177-d422-e2ffd646aeab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model accuracy score with default parameters: 0.9903\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Not horrible, but not great either. There are so many options for kernels and degrees and regularization parameters that we need to use a systematic approach to determine which works best. Luckly for us, sklearn has a handy package `GridSearchCV` that can let us test many parameters easily."
      ],
      "metadata": {
        "id": "_yz87Kc6mxOY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "\n",
        "# import SVC classifier\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "\n",
        "# instantiate classifier with default parameters\n",
        "# here, kernel=rbf, C=1.0 and gamma=auto\n",
        "svc=SVC() \n",
        "\n",
        "parameters = [ {'C':[1, 10, 100, 1000], 'kernel':['linear']},\n",
        "               {'C':[1, 10, 100, 1000], 'kernel':['rbf'], 'gamma':[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]},\n",
        "               {'C':[1, 10, 100, 1000], 'kernel':['poly'], 'degree': [2,3,4] ,'gamma':[0.01,0.02,0.03,0.04,0.05]} \n",
        "              ]\n",
        "\n",
        "\n",
        "grid_search = GridSearchCV(estimator = svc,  \n",
        "                           param_grid = parameters,\n",
        "                           scoring = 'accuracy',\n",
        "                           cv = 5,\n",
        "                           verbose=0)\n",
        "\n",
        "grid_search.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EuZ-HESYcqVF",
        "outputId": "76143490-961e-4f31-bc91-1338ca52bcc9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=SVC(),\n",
              "             param_grid=[{'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n",
              "                         {'C': [1, 10, 100, 1000],\n",
              "                          'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8,\n",
              "                                    0.9],\n",
              "                          'kernel': ['rbf']},\n",
              "                         {'C': [1, 10, 100, 1000], 'degree': [2, 3, 4],\n",
              "                          'gamma': [0.01, 0.02, 0.03, 0.04, 0.05],\n",
              "                          'kernel': ['poly']}],\n",
              "             scoring='accuracy')"
            ]
          },
          "metadata": {},
          "execution_count": 167
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Best CV Score:\", grid_search.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2LPZCgEhc5mS",
        "outputId": "c5f285bd-656c-4917-98ad-a89c9cdeab8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best CV Score: 0.9957446808510639\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Best Parameters:\", grid_search.best_params_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e5klYH_kc7rq",
        "outputId": "70543927-e534-479c-8404-283010cfcf2c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Parameters: {'C': 100, 'kernel': 'linear'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Best Score Results:\", grid_search.score(X_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fuWdZ-CudBQt",
        "outputId": "d865fb4f-6868-410c-9930-f33385b90809"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Score Results: 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Nice! It appears that a linear model with a regularization parameter of 100 gives us the best results. The regularization parameter C tells the model how much you want to avoid misclassifying each training example. Increasing C makes the model more accurate in fitting the training data, but can lead to overfitting. Let's see how this optimized model performs overall."
      ],
      "metadata": {
        "id": "g9S4ZNKXdEMY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "final_model = SVC(kernel = 'linear', C = 100) \n",
        "\n",
        "# fit classifier to training set\n",
        "final_model.fit(X_train,y_train)\n",
        "\n",
        "# make predictions on test set\n",
        "y_pred=final_model.predict(X_test)\n",
        "\n",
        "predictions = final_model.predict(X_test)\n",
        "cm = confusion_matrix(y_test, predictions, labels=final_model.classes_)"
      ],
      "metadata": {
        "id": "83xA19EWeJnq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "\n",
        "def confusion_mat_plot(cm, model_type):\n",
        "  \"\"\"\"\n",
        "  Generates a confusion matrix for the Penguins dataset. \n",
        "  Inputs:\n",
        "    cm, an already fitted confusion matrix\n",
        "    model_type, a string of the name of the model for the plot title\n",
        "  \"\"\"\n",
        "  x_axis_labels = [\"Adelie\", \"Chinstrap\", \"Gentoo\"]\n",
        "  y_axis_labels = [\"Adelie\", \"Chinstrap\", \"Gentoo\"]\n",
        "  ax = sns.heatmap(cm, annot = True, cmap = \"Reds\", xticklabels=x_axis_labels, yticklabels=y_axis_labels)\n",
        "  ax.set_title(model_type + \" Confusion Matrix\")\n",
        "  ax.set_xlabel(\"Predicted Values\")\n",
        "  ax.set_ylabel(\"Actual Values\")\n",
        "  return ax"
      ],
      "metadata": {
        "id": "D7s7Nf3lwpcI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "confusion_mat_plot(cm, \"SVM\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "TDWWuSKdw1uR",
        "outputId": "398056ae-5f4b-4ba6-b3a6-6355edc1e0fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f9ebd57c8d0>"
            ]
          },
          "metadata": {},
          "execution_count": 173
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now we can see how well our model did. No data points were misclassified, meaning that our model did very well on the test data."
      ],
      "metadata": {
        "id": "Pf4W-mxVofrI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Decision Regions**"
      ],
      "metadata": {
        "id": "Ug8hlu5HafqF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We will now create and apply a graphing function to vizualize our model's performance by decision region. This will help us understand how the SVM model is didiving the data and where the hyperplanes lie. "
      ],
      "metadata": {
        "id": "Aopr2lF4bao3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.patches as mpatches\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_regions_island_SVM(c):\n",
        "    '''\n",
        "    Outputs plots of decision regions by Species using models that consider Culmen Length and Culmen Depth. \n",
        "    Expected input is a non-fitted model with set parameters. \n",
        "    '''\n",
        " \n",
        "    # create a dictionary of Islands of the penguins df\n",
        "    d = {\n",
        "        island_name : penguins[penguins[\"Island\"] == island_name] \n",
        "        for island_name in penguins[\"Island\"].unique()\n",
        "    }\n",
        "    \n",
        "\n",
        "    X, y = data_clean(penguins, drop = [\"Comments\", \"Region\", \"Date Egg\", \"studyName\", \"Delta 15 N (o/oo)\", \n",
        "                \"Delta 13 C (o/oo)\", \"Sample Number\", \"Stage\", \"Individual ID\",\n",
        "                \"Clutch Completion\", \"Body Mass (g)\", \"Sex\", \"Flipper Length (mm)\", \"Island\"], test = True)\n",
        "  \n",
        "    c.fit(X, y) # fits the model \n",
        "\n",
        "    # recodes to maintain the proper categories even when certain penguins are dropped \n",
        "    # some islands only have 1-2 species, so this helps account for that \n",
        "    recode = {\n",
        "    \"Adelie\" : 0, \n",
        "    \"Chinstrap\" : 1,\n",
        "    \"Gentoo\" : 2 \n",
        "}\n",
        "    for i in d.keys():\n",
        "        df = d[i]\n",
        "        x0 = df['Culmen Length (mm)']\n",
        "        x1 = df['Culmen Depth (mm)']\n",
        "        y  = df['Species'].map(recode)\n",
        "    \n",
        "    # create a grid\n",
        "        grid_x = np.linspace(x0.min(),x0.max(),501)\n",
        "        grid_y = np.linspace(x1.min(),x1.max(),501)\n",
        "        xx, yy = np.meshgrid(grid_x, grid_y)\n",
        "    \n",
        "    # extract model predictions, using the \n",
        "    # np.c_ attribute to join together the \n",
        "    # two parts of the grid. \n",
        "    # array.ravel() converts an multidimensional\n",
        "    # array into a 1d array, and we use array.reshape()\n",
        "    # to turn the resulting predictions p \n",
        "    # back into 2d\n",
        "    \n",
        "        XX = xx.ravel() # culmen length \n",
        "        YY = yy.ravel() # culmen depth \n",
        "        XY = np.c_[XX, YY]\n",
        "\n",
        "        p = c.predict(XY)\n",
        "        p = p.reshape(xx.shape)\n",
        "    \n",
        "    # create the plot\n",
        "        fig, ax = plt.subplots(1)\n",
        "    \n",
        "    # use contour plot to visualize the predictions\n",
        "        ax.contourf(xx, yy, p, alpha = 0.2, cmap = \"jet\")\n",
        "    \n",
        "    # plot the data\n",
        "        ax.scatter(x0, x1, c = y, cmap = \"jet\", vmin = 0, vmax = 2)\n",
        "        \n",
        "        ax.set(xlabel = \"Culmen Length (mm)\",\n",
        "               ylabel = \"Culmen Depth (mm)\",\n",
        "               title = i)\n",
        "        \n",
        "        proxy = [plt.Rectangle((0, 0), 1, 1, fc = pc.get_facecolor()[0]) for pc in ax.collections] # create a legend for the plots\n",
        "        plt.legend(proxy, [\"Adelie\", \"Chinstrap\", \"Gentoo\"])\n",
        "        # set the colors to match the \"jet\" cmap background\n",
        "        ax.get_legend().legendHandles[0].set_color(\"mediumblue\") \n",
        "        ax.get_legend().legendHandles[1].set_color(\"lime\")\n",
        "        ax.get_legend().legendHandles[2].set_color(\"firebrick\")\n"
      ],
      "metadata": {
        "id": "lBMJnQWpqwUi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_regions_island_SVM(SVC(kernel = 'linear', C = 100))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "xF4HG9GevN2a",
        "outputId": "d044dd89-b344-456f-f94a-9d86cbccc228"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning:\n",
            "\n",
            "X does not have valid feature names, but SVC was fitted with feature names\n",
            "\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning:\n",
            "\n",
            "X does not have valid feature names, but SVC was fitted with feature names\n",
            "\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning:\n",
            "\n",
            "X does not have valid feature names, but SVC was fitted with feature names\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now we have a very clear idea of the SVM model's decision boundaries. In the Torgensen, where there are no other penguins than the Adelie, there remains a bit of misclassification. This makes sense, as we tested the general model with all the Islands in the background. "
      ],
      "metadata": {
        "id": "LAfj-5uCcqgy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Issues with this model tend to fall on the hyperplane boundary lines. This could be for two reasons: the trend the model uses and the C value. In the real world, very little data is truly linear. While we tried rbf and poly kernels, they did not perform as well on our training data as the linear model. However, the more data points were generated, the more fell outside of those strict linear bounds. As you can see within our plots, most of the misclassifications fall really close to the boundary lines. Very few are far within another area. This makes sense, as within our EDA, there were a few penguins that fell outside of the cluster of Culmen Lengths and Widths. If we try to classify each of these penguins perfectly with a curved function, we risk overfitting and performing even more poorly on unseen data. Our C was 100, which is also relatively high and can lead to overfitting. No model will ever be truly perfect on unseen data, and our decision boundary generator allowed us to evaluate our classifier on points larger than the actual set of data. "
      ],
      "metadata": {
        "id": "h35gLtuFwDvc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**Multinomial Linear Regression**"
      ],
      "metadata": {
        "id": "BDMPdyYrhuEl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "A multinomial logistic regression model is used to predict probabilities of potential outcomes of categorical variables by using independent variables. \n",
        "\n",
        "Let's begin by creating testing and training datasets and fitting a simple MLR model!"
      ],
      "metadata": {
        "id": "YtgihN0Nh9hh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Split into train and test \n",
        "train1, test1 = train_test_split(penguins, test_size = .3)\n",
        "X_train1, y_train1 = data_clean(train, drop = [\"Comments\", \"Region\", \"Date Egg\", \"studyName\", \"Delta 15 N (o/oo)\", \n",
        "                \"Delta 13 C (o/oo)\", \"Sample Number\", \"Stage\", \"Individual ID\",\n",
        "                \"Clutch Completion\", \"Body Mass (g)\", \"Sex\", \"Flipper Length (mm)\"], test = True)\n",
        "X_test1,  y_test1  = data_clean(test, drop = [\"Comments\", \"Region\", \"Date Egg\", \"studyName\", \"Delta 15 N (o/oo)\", \n",
        "                \"Delta 13 C (o/oo)\", \"Sample Number\", \"Stage\", \"Individual ID\",\n",
        "                \"Clutch Completion\", \"Body Mass (g)\", \"Sex\", \"Flipper Length (mm)\"], test = True)\n"
      ],
      "metadata": {
        "id": "kHvbtHQ1h_Q0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "2KyIVKaJiRtA",
        "outputId": "541332e5-4e92-423a-84ab-9209b89ad445"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Island  Culmen Length (mm)  Culmen Depth (mm)\n",
              "293       0                46.5               14.8\n",
              "133       1                37.5               18.5\n",
              "196       1                50.9               17.9\n",
              "188       1                47.6               18.3\n",
              "16        2                38.7               19.0\n",
              "..      ...                 ...                ...\n",
              "189       1                52.0               20.7\n",
              "1         2                39.5               17.4\n",
              "224       0                47.6               14.5\n",
              "228       0                43.3               13.4\n",
              "69        2                41.8               19.4\n",
              "\n",
              "[238 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a4788003-9724-4b39-b17a-634c18ef402a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Island</th>\n",
              "      <th>Culmen Length (mm)</th>\n",
              "      <th>Culmen Depth (mm)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>293</th>\n",
              "      <td>0</td>\n",
              "      <td>46.5</td>\n",
              "      <td>14.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>133</th>\n",
              "      <td>1</td>\n",
              "      <td>37.5</td>\n",
              "      <td>18.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>1</td>\n",
              "      <td>50.9</td>\n",
              "      <td>17.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188</th>\n",
              "      <td>1</td>\n",
              "      <td>47.6</td>\n",
              "      <td>18.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2</td>\n",
              "      <td>38.7</td>\n",
              "      <td>19.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>189</th>\n",
              "      <td>1</td>\n",
              "      <td>52.0</td>\n",
              "      <td>20.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>39.5</td>\n",
              "      <td>17.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>224</th>\n",
              "      <td>0</td>\n",
              "      <td>47.6</td>\n",
              "      <td>14.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>228</th>\n",
              "      <td>0</td>\n",
              "      <td>43.3</td>\n",
              "      <td>13.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>2</td>\n",
              "      <td>41.8</td>\n",
              "      <td>19.4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>238 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a4788003-9724-4b39-b17a-634c18ef402a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a4788003-9724-4b39-b17a-634c18ef402a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a4788003-9724-4b39-b17a-634c18ef402a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 177
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QkBoCw4liVjX",
        "outputId": "ef8d3b8e-d156-4f0e-ab56-ca08da5fbc01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "293    2\n",
              "133    0\n",
              "196    1\n",
              "188    1\n",
              "16     0\n",
              "      ..\n",
              "189    1\n",
              "1      0\n",
              "224    2\n",
              "228    2\n",
              "69     0\n",
              "Name: Species, Length: 238, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 178
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now that the data is split, let's incorporate the MLR model and K-fold cross validation. K-fold cross-validation allows us to take a small portion of our training data and use it as a test set. Therefore, we are able to train the model on the remaining portion and evaluate it against the small portion. In this case, I will use a 10-fold cross-validation which means it will hold out 10%, train the other 90% and repeat 10 times."
      ],
      "metadata": {
        "id": "wGG7WNdViZed"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define model\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# Make a model\n",
        "MLR = LogisticRegression(max_iter = 40000)\n",
        "\n",
        "# 10-fold cross-validation: \n",
        "cv_score1 = cross_val_score(MLR, X_train1, y_train1, cv=10).mean()\n",
        "cv_score1\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fJ-M9Jk1if-6",
        "outputId": "a2da4866-1dda-4ce4-a6ce-c43bb99a6406"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9748188405797104"
            ]
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train1 = X_train1[['Culmen Length (mm)', 'Culmen Depth (mm)','Island']]\n",
        "X_test1 = X_test1[['Culmen Length (mm)', 'Culmen Depth (mm)','Island']]\n",
        "\n",
        "MLR.fit(X_train1, y_train1)\n",
        "MLR.score(X_test1, y_test1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ADcfu_h8ilAy",
        "outputId": "7b565a56-6d27-498c-d37d-24dc9798a33d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9805825242718447"
            ]
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After scoring our model against the test data, the score is about 98%."
      ],
      "metadata": {
        "id": "w6HWobnND2AC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Confusion Matrix**"
      ],
      "metadata": {
        "id": "wh2SsN_xBI2D"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In order to see where the MLR model made mistakes, we need to use the testing data to obtain the predictions."
      ],
      "metadata": {
        "id": "-gLujVVuipEq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "y_prediction = MLR.predict(X_test1)\n",
        "y_prediction"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_IqkMT5BirRr",
        "outputId": "ce6e90aa-a048-4ead-e185-cf44f7398e99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 0, 0, 2, 0, 0, 0, 0, 2, 1, 1, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0,\n",
              "       2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2,\n",
              "       2, 1, 2, 0, 0, 1, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 2, 2, 0, 0, 2,\n",
              "       0, 0, 1, 0, 0, 1, 2, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0,\n",
              "       0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 1, 0, 0, 2, 2])"
            ]
          },
          "metadata": {},
          "execution_count": 181
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "By extracting the predictions made from the test data, we can now develop a confusion matrix."
      ],
      "metadata": {
        "id": "NbAqGsuciu6Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "c_matrix1 = confusion_matrix(y_test1, y_prediction)\n",
        "c_matrix1 "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i2sUex4qiyUB",
        "outputId": "89f64770-3c3b-4a97-ea00-6d438cad3470"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[58,  0,  0],\n",
              "       [ 2,  7,  0],\n",
              "       [ 0,  0, 36]])"
            ]
          },
          "metadata": {},
          "execution_count": 182
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's create a visualization to make interpreting the confusion matrix easier."
      ],
      "metadata": {
        "id": "OX6vXDsfi0dO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "confusion_mat_plot(c_matrix1, \"MLR\");"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "uYvksJpoi2c0",
        "outputId": "88f889b1-9eab-4bbe-93b3-825b6e29be71"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Nice! There appears to be only 2 data points that were misclassified. To further understand where and why the model made mistakes, we will create decision regions."
      ],
      "metadata": {
        "id": "_kRHBiE7i7b7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Decision Regions**"
      ],
      "metadata": {
        "id": "T0jWqPR-i9xF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "By creating a visualization of the decision regions, we will be able to see how the MLR model made its decisions."
      ],
      "metadata": {
        "id": "LUbMgwPzjBVv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "le = preprocessing.LabelEncoder()\n",
        "penguins['label'] = le.fit_transform(penguins['Species'])\n",
        "\n",
        "penguins = penguins.dropna(subset=['Culmen Length (mm)', 'Culmen Depth (mm)'])\n",
        "X = penguins[['Culmen Length (mm)', 'Culmen Depth (mm)']]\n",
        "y = penguins['label']"
      ],
      "metadata": {
        "id": "0Tpwxn6ZlbpM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We had to use two different functions for plotting the decision regions due to the way our models reacted to fitting. Therefore, this function lacks 'c.fit(X, y)' which is used to fit the model as seen in the \"plot_regions_SVM\" function."
      ],
      "metadata": {
        "id": "zZwIb6LzEzzo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_regions_MLR(c):\n",
        "    '''\n",
        "    a function that creates decision regions of \n",
        "    'Species' using Culmen Length (mm) vs. Culmen \n",
        "    Depth (mm) plots for each possible value of\n",
        "    'Island'\n",
        "\n",
        "    input: classifier model\n",
        "    \n",
        "    output: plot with decision regions\n",
        "    \n",
        "    '''\n",
        "    # defines a diction with keys being the name of the island\n",
        "    # and values being the corresponding subset of the data frame\n",
        "    d = {\n",
        "        island_name : penguins[penguins[\"Island\"] == island_name] \n",
        "        for island_name in penguins[\"Island\"].unique()\n",
        "    }\n",
        "    \n",
        "    \n",
        "    # sets 'Culmen Length (mm)' as horizontal axis values\n",
        "    # sets 'Culmen Depth (mm)' as vertical axis values\n",
        "    # loops over each Island to create separate plots of decision regions\n",
        "    X, y = data_clean(penguins, drop = [\"Comments\", \"Region\", \"Date Egg\", \"studyName\", \"Delta 15 N (o/oo)\", \n",
        "                \"Delta 13 C (o/oo)\", \"Sample Number\", \"Stage\", \"Individual ID\",\n",
        "                \"Clutch Completion\", \"Body Mass (g)\", \"Sex\", \"Flipper Length (mm)\", \"Island\"], test = True)\n",
        "  \n",
        "    recode = {\n",
        "    \"Adelie\" : 0, \n",
        "    \"Chinstrap\" : 1,\n",
        "    \"Gentoo\" : 2 \n",
        "}\n",
        "    for i in d.keys():\n",
        "        df = d[i]\n",
        "        x0 = df['Culmen Length (mm)']\n",
        "        x1 = df['Culmen Depth (mm)']\n",
        "        y  = df['Species'].map(recode)\n",
        "    \n",
        "    # create a grid\n",
        "        grid_x = np.linspace(x0.min(),x0.max(),501)\n",
        "        grid_y = np.linspace(x1.min(),x1.max(),501)\n",
        "        xx, yy = np.meshgrid(grid_x, grid_y)\n",
        "    \n",
        "    # extract model predictions, using the \n",
        "    # np.c_ attribute to join together the \n",
        "    # two parts of the grid. \n",
        "    # array.ravel() converts an multidimensional\n",
        "    # array into a 1d array, and we use array.reshape()\n",
        "    # to turn the resulting predictions p \n",
        "    # back into 2d\n",
        "    \n",
        "        XX = xx.ravel()\n",
        "        YY = yy.ravel()\n",
        "        XY = np.c_[XX, YY]\n",
        "\n",
        "        p = c.predict(XY)\n",
        "        p = p.reshape(xx.shape)\n",
        "    \n",
        "    # create the plot\n",
        "        fig, ax = plt.subplots(1)\n",
        "    \n",
        "    # use contour plot to visualize the predictions\n",
        "        ax.contourf(xx, yy, p, alpha = 0.2, cmap = \"jet\")\n",
        "    \n",
        "    # plot the data\n",
        "        ax.scatter(x0, x1, c = y, cmap = \"jet\", vmin = 0, vmax = 2)\n",
        "        \n",
        "        ax.set(xlabel = \"Culmen Length (mm)\",\n",
        "               ylabel = \"Culmen Depth (mm)\",\n",
        "               title = i)\n",
        "        \n",
        "        proxy = [plt.Rectangle((0, 0), 1, 1, fc = pc.get_facecolor()[0]) for pc in ax.collections]\n",
        "        plt.legend(proxy, [\"Adelie\", \"Chinstrap\", \"Gentoo\"])\n",
        "        ax.get_legend().legendHandles[0].set_color(\"mediumblue\")\n",
        "        ax.get_legend().legendHandles[1].set_color(\"lime\")\n",
        "        ax.get_legend().legendHandles[2].set_color(\"firebrick\")\n",
        "\n",
        "    "
      ],
      "metadata": {
        "id": "ZwdfyKCpjESz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = LogisticRegression(max_iter = 40000)\n",
        "model.fit(X,y)\n",
        "plot_regions_MLR(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ncpZ1keXpBTH",
        "outputId": "6c780fc3-a79d-44bc-b3f8-9365982238d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning:\n",
            "\n",
            "X does not have valid feature names, but LogisticRegression was fitted with feature names\n",
            "\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning:\n",
            "\n",
            "X does not have valid feature names, but LogisticRegression was fitted with feature names\n",
            "\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning:\n",
            "\n",
            "X does not have valid feature names, but LogisticRegression was fitted with feature names\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After observing these decision regions, we can see where the MLR model correctly and incorrectly predicted the penguin species. Although the model predicted the species correctly most of the time, there are a few mistakes point out:\n",
        "\n",
        "-The Torgersen Island scatterplot shows how the model incorrectly predicted a few Adelie penguins to be Chinstrap penguins.\n",
        "\n",
        "-The Biscoe Island scatterplot shows how the model incorrectly predicted a few Gentoo penguins to be Chinstrap penguins.\n",
        "\n",
        "-The Dream Island scatterplot shows how the model incorrectly predicted a few Chinstrap penguins to be Gentoo penguins.\n",
        "\n",
        "These mistakes could be due to the nature of a linear regression model. This is because it assumes that there is some sort of linear relationship between the dependent and independent variables. However, there are many cases where datasets like the penguin dataset don't have linearity. Therefore, the points that reside on the hyperplane boundary lines would most likely not be a problem if the data wasn't assumed to be linear. For example, the Dream Island scatterplot has a few Chinstrap penguins on the boundary line bordering the Adelie penguins. Although there are models with non-linear boundary lines, there are instances where overfitting could occur if the boundaries are excessively curved. In other words, it is difficult to find a model that is perfect for a specified dataset."
      ],
      "metadata": {
        "id": "YqEyWXG6jj88"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Discussion**\n",
        "\n",
        "- Overall performance of SVM Model:\n",
        "  - The SVM model performed extremely well with its default parameters. However, after determining a regularization parameter of 100, the model performed even better. This is because increasing the C value can make the model more accurate, but it could also lead to overfitting as mentioned earlier. Overall, the model scored a solid accuracy of 99%, and there were only minor mistakes as shown by the decision regions.\n",
        "\n",
        "- Overall performance of MLR Model:\n",
        "  - The MLR model proved to be strong at predicting a penguin species based on the confusion matrix and decision region scatterplots. Although there were a few mistakes, most likely due to its linear nature, the accuracy was up to par. Overall, the model scored an accuracy of 98%, and there were minor mistakes as shown by the confusion matrix and decision regions.\n",
        "\n",
        "- Which combination of model and features do you recommend:\n",
        "  - The best combination we recommend is the SVM model which examines Island, Culmen Length (mm), and Culmen Depth (mm). This is because we can alter the parameters to enhance the model to increase its performance and avoid overfitting. It can be further supported by the model scoring better than the MLR model and while also producing less mistakes in the confusion matrix and decision regions.\n",
        "\n",
        "- Discuss how the model could be improved if more or different data were available:\n",
        "  - The use of more predictors can help in avoiding creating an oversimplified model. There may be variations in the data that certain features would be able to explain, and our use of three variables only could possibly be a limiting factor. On the other hand, training with more data points would also help us avoid overfitting. The dataset is relatively small and there is an inconsistent distribution of penguin species across each island. The quality of the data plays a huge role in the machine learning process and any issues in distribution and count could have extreme effects on the ability for the model to be useful within the real world. "
      ],
      "metadata": {
        "id": "R-IkXvsSwwIZ"
      }
    }
  ]
}
